
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000820  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009b4  080009b4  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009b4  080009b4  00002020  2**0
                  CONTENTS
  4 .ARM          00000000  080009b4  080009b4  00002020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009b4  080009b4  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009b4  080009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009b8  080009b8  000019b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080009bc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002020  2**0
                  CONTENTS
 10 .bss          0000001c  20000020  20000020  00002020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  00002020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000103d  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000357  00000000  00000000  0000308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  000033e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c0  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000011c5  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000139b  00000000  00000000  00004775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004e0e  00000000  00000000  00005b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a91e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000348  00000000  00000000  0000a964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0000acac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800099c 	.word	0x0800099c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	0800099c 	.word	0x0800099c

080001d4 <GPIO_u8InitPin>:
 * @param[in] copy_pStrPinConfig : the initialization value of the pin
 * @retVal ErrorState
 */

 uint8_t GPIO_u8InitPin(const GPIO_pinConfig_t* copy_pStrPinConfig)
{
 80001d4:	b490      	push	{r4, r7}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint8_t local_u8ErrorState = OK;
 80001dc:	2301      	movs	r3, #1
 80001de:	73fb      	strb	r3, [r7, #15]
	if(copy_pStrPinConfig != NULL)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	f000 8126 	beq.w	8000434 <GPIO_u8InitPin+0x260>
	{
		if((copy_pStrPinConfig->portId <= GPIO_PORTH)&&(copy_pStrPinConfig->pinId <= GPIO_PIN15))
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b07      	cmp	r3, #7
 80001ee:	f200 811e 	bhi.w	800042e <GPIO_u8InitPin+0x25a>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	2b0f      	cmp	r3, #15
 80001f8:	f200 8119 	bhi.w	800042e <GPIO_u8InitPin+0x25a>
		{
			/* Select GPIO Mode: Input, Output, Analog, Alternate Function */
			// Clear the Mode Bits
			PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->MODER &= (~(MODER_MASK << (copy_pStrPinConfig->pinId) * MODER_PIN_ACCESS));
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	461a      	mov	r2, r3
 8000202:	4b91      	ldr	r3, [pc, #580]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	785b      	ldrb	r3, [r3, #1]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	2103      	movs	r1, #3
 8000212:	fa01 f303 	lsl.w	r3, r1, r3
 8000216:	43db      	mvns	r3, r3
 8000218:	4619      	mov	r1, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	4618      	mov	r0, r3
 8000220:	4b89      	ldr	r3, [pc, #548]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000222:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000226:	400a      	ands	r2, r1
 8000228:	601a      	str	r2, [r3, #0]
			PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->MODER |= (copy_pStrPinConfig->pinMode) << ((copy_pStrPinConfig->pinId) * MODER_PIN_ACCESS);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	4b85      	ldr	r3, [pc, #532]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789b      	ldrb	r3, [r3, #2]
 800023c:	4619      	mov	r1, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	4619      	mov	r1, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	4b7d      	ldr	r3, [pc, #500]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000252:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000256:	430a      	orrs	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
			
			/* Select GPIO Pull State: No Pull, Pull Up, Pull Down */
			/* Clear the Pull Bits */
			PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->PUPDR &= (~(PUPDR_MASK << (copy_pStrPinConfig->pinId) * PUPDR_PIN_ACCESS));
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	4b79      	ldr	r3, [pc, #484]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000266:	68da      	ldr	r2, [r3, #12]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	785b      	ldrb	r3, [r3, #1]
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	2103      	movs	r1, #3
 8000270:	fa01 f303 	lsl.w	r3, r1, r3
 8000274:	43db      	mvns	r3, r3
 8000276:	4619      	mov	r1, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	4b72      	ldr	r3, [pc, #456]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000280:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000284:	400a      	ands	r2, r1
 8000286:	60da      	str	r2, [r3, #12]
			PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->PUPDR |= ((copy_pStrPinConfig->pinPullType) << (copy_pStrPinConfig->pinId) * PUPDR_PIN_ACCESS);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b6e      	ldr	r3, [pc, #440]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000294:	68da      	ldr	r2, [r3, #12]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	795b      	ldrb	r3, [r3, #5]
 800029a:	4619      	mov	r1, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	4b66      	ldr	r3, [pc, #408]	@ (8000448 <GPIO_u8InitPin+0x274>)
 80002b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002b4:	430a      	orrs	r2, r1
 80002b6:	60da      	str	r2, [r3, #12]
			
			/* Select Output Type & Output Speed in case of GPIO Output or Alternate Function */
			if(((copy_pStrPinConfig->pinMode) == GPIO_OUTPUT) || ((copy_pStrPinConfig->pinMode) == GPIO_ALTERNATE_FUNCTION))
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d004      	beq.n	80002ca <GPIO_u8InitPin+0xf6>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	789b      	ldrb	r3, [r3, #2]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	f040 80b8 	bne.w	800043a <GPIO_u8InitPin+0x266>
			{
				/* Select Output Type: Push Pull, Open Drain */
				PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->OTYPER &= (~(OTYPER_MASK << copy_pStrPinConfig->pinId));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000448 <GPIO_u8InitPin+0x274>)
 80002d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	785b      	ldrb	r3, [r3, #1]
 80002dc:	4619      	mov	r1, r3
 80002de:	2301      	movs	r3, #1
 80002e0:	408b      	lsls	r3, r1
 80002e2:	43db      	mvns	r3, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	4618      	mov	r0, r3
 80002ec:	4b56      	ldr	r3, [pc, #344]	@ (8000448 <GPIO_u8InitPin+0x274>)
 80002ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002f2:	400a      	ands	r2, r1
 80002f4:	605a      	str	r2, [r3, #4]
				PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->OTYPER |= ((copy_pStrPinConfig->pinOutputType) << (copy_pStrPinConfig->pinId));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	4b52      	ldr	r3, [pc, #328]	@ (8000448 <GPIO_u8InitPin+0x274>)
 80002fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	4619      	mov	r1, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	785b      	ldrb	r3, [r3, #1]
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	4619      	mov	r1, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	4b4b      	ldr	r3, [pc, #300]	@ (8000448 <GPIO_u8InitPin+0x274>)
 800031c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000320:	430a      	orrs	r2, r1
 8000322:	605a      	str	r2, [r3, #4]

				/* Select Output Speed: Low, Medium, High */
				PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->OSPEEDR &= (~(OSPEEDR_MASK << (copy_pStrPinConfig->pinId) * OSPEEDR_PIN_ACCESS));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	461a      	mov	r2, r3
 800032a:	4b47      	ldr	r3, [pc, #284]	@ (8000448 <GPIO_u8InitPin+0x274>)
 800032c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000330:	689a      	ldr	r2, [r3, #8]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	785b      	ldrb	r3, [r3, #1]
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	2103      	movs	r1, #3
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	4619      	mov	r1, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	4b3f      	ldr	r3, [pc, #252]	@ (8000448 <GPIO_u8InitPin+0x274>)
 800034a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800034e:	400a      	ands	r2, r1
 8000350:	609a      	str	r2, [r3, #8]
				PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->OSPEEDR |= ((copy_pStrPinConfig->pinSpeed) << (copy_pStrPinConfig->pinId) * OSPEEDR_PIN_ACCESS);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4b3b      	ldr	r3, [pc, #236]	@ (8000448 <GPIO_u8InitPin+0x274>)
 800035a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800035e:	689a      	ldr	r2, [r3, #8]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	78db      	ldrb	r3, [r3, #3]
 8000364:	4619      	mov	r1, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	785b      	ldrb	r3, [r3, #1]
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	4619      	mov	r1, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	4b33      	ldr	r3, [pc, #204]	@ (8000448 <GPIO_u8InitPin+0x274>)
 800037a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800037e:	430a      	orrs	r2, r1
 8000380:	609a      	str	r2, [r3, #8]

				/* Select the Pin Alternative Function */
				if((copy_pStrPinConfig->pinMode) == GPIO_ALTERNATE_FUNCTION)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	2b02      	cmp	r3, #2
 8000388:	d157      	bne.n	800043a <GPIO_u8InitPin+0x266>
				{
					PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->AFR[(copy_pStrPinConfig->pinId) / 8u] &= (~(AFR_MASK << ((copy_pStrPinConfig->pinId) % 8) * AFR_PIN_ACCESS));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	461a      	mov	r2, r3
 8000390:	4b2d      	ldr	r3, [pc, #180]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	7852      	ldrb	r2, [r2, #1]
 800039a:	08d2      	lsrs	r2, r2, #3
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	3208      	adds	r2, #8
 80003a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	f003 0307 	and.w	r3, r3, #7
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	210f      	movs	r1, #15
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	43db      	mvns	r3, r3
 80003b6:	461c      	mov	r4, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	4b22      	ldr	r3, [pc, #136]	@ (8000448 <GPIO_u8InitPin+0x274>)
 80003c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003c4:	6879      	ldr	r1, [r7, #4]
 80003c6:	7849      	ldrb	r1, [r1, #1]
 80003c8:	08c9      	lsrs	r1, r1, #3
 80003ca:	b2c9      	uxtb	r1, r1
 80003cc:	4608      	mov	r0, r1
 80003ce:	ea02 0104 	and.w	r1, r2, r4
 80003d2:	f100 0208 	add.w	r2, r0, #8
 80003d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					PRV_arrGPIO_Ports[copy_pStrPinConfig->portId]->AFR[(copy_pStrPinConfig->pinId) / 8u] |= ((copy_pStrPinConfig->pinAltFunc) << ((copy_pStrPinConfig->pinId) % 8) * AFR_PIN_ACCESS);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <GPIO_u8InitPin+0x274>)
 80003e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	7852      	ldrb	r2, [r2, #1]
 80003ea:	08d2      	lsrs	r2, r2, #3
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	3208      	adds	r2, #8
 80003f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	799b      	ldrb	r3, [r3, #6]
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	785b      	ldrb	r3, [r3, #1]
 80003fe:	f003 0307 	and.w	r3, r3, #7
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	461c      	mov	r4, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <GPIO_u8InitPin+0x274>)
 8000412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	7849      	ldrb	r1, [r1, #1]
 800041a:	08c9      	lsrs	r1, r1, #3
 800041c:	b2c9      	uxtb	r1, r1
 800041e:	4608      	mov	r0, r1
 8000420:	ea42 0104 	orr.w	r1, r2, r4
 8000424:	f100 0208 	add.w	r2, r0, #8
 8000428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(((copy_pStrPinConfig->pinMode) == GPIO_OUTPUT) || ((copy_pStrPinConfig->pinMode) == GPIO_ALTERNATE_FUNCTION))
 800042c:	e005      	b.n	800043a <GPIO_u8InitPin+0x266>
				}
			}
		}
		else
		{
			local_u8ErrorState = NOK;
 800042e:	2300      	movs	r3, #0
 8000430:	73fb      	strb	r3, [r7, #15]
 8000432:	e003      	b.n	800043c <GPIO_u8InitPin+0x268>
		}
		}
	else
	{
		local_u8ErrorState = NULL_PTR_ERR;
 8000434:	2302      	movs	r3, #2
 8000436:	73fb      	strb	r3, [r7, #15]
 8000438:	e000      	b.n	800043c <GPIO_u8InitPin+0x268>
			if(((copy_pStrPinConfig->pinMode) == GPIO_OUTPUT) || ((copy_pStrPinConfig->pinMode) == GPIO_ALTERNATE_FUNCTION))
 800043a:	bf00      	nop
	}
	return local_u8ErrorState;
 800043c:	7bfb      	ldrb	r3, [r7, #15]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bc90      	pop	{r4, r7}
 8000446:	4770      	bx	lr
 8000448:	20000000 	.word	0x20000000

0800044c <GPIO_u8SetPinValue>:
 * @param[in] copy_enuPinId : pin number, get options @GPIO_pinId_t enum
 * @param[in] copy_enuPinValue: the output value, get options @GPIO_pinValue_t enum
 * @retVal ErrorState
 */
uint8_t GPIO_u8SetPinValue(GPIO_portId_t copy_enuPortId, GPIO_pinId_t copy_enuPinId, GPIO_pinValue_t copy_enuPinValue)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
 8000456:	460b      	mov	r3, r1
 8000458:	71bb      	strb	r3, [r7, #6]
 800045a:	4613      	mov	r3, r2
 800045c:	717b      	strb	r3, [r7, #5]
	uint8_t local_u8ErrorState = OK;
 800045e:	2301      	movs	r3, #1
 8000460:	73fb      	strb	r3, [r7, #15]
	if((copy_enuPortId <= GPIO_PORTH)&&(copy_enuPinId <= GPIO_PIN15))
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b07      	cmp	r3, #7
 8000466:	d82e      	bhi.n	80004c6 <GPIO_u8SetPinValue+0x7a>
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	2b0f      	cmp	r3, #15
 800046c:	d82b      	bhi.n	80004c6 <GPIO_u8SetPinValue+0x7a>
	{
		if(copy_enuPinValue == GPIO_PIN_LOW)
 800046e:	797b      	ldrb	r3, [r7, #5]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <GPIO_u8SetPinValue+0x4c>
		{
			PRV_arrGPIO_Ports[copy_enuPortId]->ODR &= (~(0b1 << copy_enuPinId));
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4a18      	ldr	r2, [pc, #96]	@ (80004d8 <GPIO_u8SetPinValue+0x8c>)
 8000478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	2101      	movs	r1, #1
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4912      	ldr	r1, [pc, #72]	@ (80004d8 <GPIO_u8SetPinValue+0x8c>)
 800048e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000492:	4002      	ands	r2, r0
 8000494:	615a      	str	r2, [r3, #20]
		if(copy_enuPinValue == GPIO_PIN_LOW)
 8000496:	e018      	b.n	80004ca <GPIO_u8SetPinValue+0x7e>
			/* PRV_arrGPIO_Ports[copy_enuPortId]->BSRR = (0b1 << (16 + copy_enuPinId)); */
			/* PRV_arrGPIO_Ports[copy_enuPortId]->BRR  = (0b1 << (copy_enuPinId)); */
		}
		else if(copy_enuPinValue == GPIO_PIN_HIGH)
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d110      	bne.n	80004c0 <GPIO_u8SetPinValue+0x74>
		{
			PRV_arrGPIO_Ports[copy_enuPortId]->ODR |= (0b1 << copy_enuPinId);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <GPIO_u8SetPinValue+0x8c>)
 80004a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	79bb      	ldrb	r3, [r7, #6]
 80004aa:	2101      	movs	r1, #1
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	4908      	ldr	r1, [pc, #32]	@ (80004d8 <GPIO_u8SetPinValue+0x8c>)
 80004b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004ba:	4302      	orrs	r2, r0
 80004bc:	615a      	str	r2, [r3, #20]
		if(copy_enuPinValue == GPIO_PIN_LOW)
 80004be:	e004      	b.n	80004ca <GPIO_u8SetPinValue+0x7e>
			/* PRV_arrGPIO_Ports[copy_enuPortId]->BSRR = (0b1 << copy_enuPinId); */
		}
		else
		{
			local_u8ErrorState = NOK;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
		if(copy_enuPinValue == GPIO_PIN_LOW)
 80004c4:	e001      	b.n	80004ca <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		local_u8ErrorState = NOK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8ErrorState;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	20000000 	.word	0x20000000

080004dc <RCC_voidSetClockStatus>:
#include "RCC_interface.h"
#include "RCC_private.h"


void RCC_voidSetClockStatus(RCC_clkType_t copy_tClockType, RCC_clkStatus_t copy_tClockStatus)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	switch(copy_tClockType)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d03c      	beq.n	800056c <RCC_voidSetClockStatus+0x90>
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	dc5a      	bgt.n	80005ac <RCC_voidSetClockStatus+0xd0>
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d002      	beq.n	8000500 <RCC_voidSetClockStatus+0x24>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d01b      	beq.n	8000536 <RCC_voidSetClockStatus+0x5a>
					CLR_BIT(RCC->CR, 24);
					break;
				}
				break;
	}
}
 80004fe:	e055      	b.n	80005ac <RCC_voidSetClockStatus+0xd0>
		switch(copy_tClockStatus)
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d00f      	beq.n	8000526 <RCC_voidSetClockStatus+0x4a>
 8000506:	2b01      	cmp	r3, #1
 8000508:	d14b      	bne.n	80005a2 <RCC_voidSetClockStatus+0xc6>
			SET_BIT(RCC->CR, 0);
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a2a      	ldr	r2, [pc, #168]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]
			while(0 == GET_BIT(RCC->CR, 1));
 8000516:	bf00      	nop
 8000518:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <RCC_voidSetClockStatus+0x3c>
			break;
 8000524:	e006      	b.n	8000534 <RCC_voidSetClockStatus+0x58>
			CLR_BIT(RCC->CR, 0);
 8000526:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a23      	ldr	r2, [pc, #140]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	6013      	str	r3, [r2, #0]
			break;
 8000532:	bf00      	nop
		break;
 8000534:	e035      	b.n	80005a2 <RCC_voidSetClockStatus+0xc6>
			switch(copy_tClockStatus)
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00f      	beq.n	800055c <RCC_voidSetClockStatus+0x80>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d132      	bne.n	80005a6 <RCC_voidSetClockStatus+0xca>
				SET_BIT(RCC->CR, 16);
 8000540:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800054a:	6013      	str	r3, [r2, #0]
				while(0 == GET_BIT(RCC->CR, 17));
 800054c:	bf00      	nop
 800054e:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <RCC_voidSetClockStatus+0x72>
				break;
 800055a:	e006      	b.n	800056a <RCC_voidSetClockStatus+0x8e>
				CLR_BIT(RCC->CR, 16);
 800055c:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a15      	ldr	r2, [pc, #84]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000566:	6013      	str	r3, [r2, #0]
				break;
 8000568:	bf00      	nop
			break;
 800056a:	e01c      	b.n	80005a6 <RCC_voidSetClockStatus+0xca>
				switch(copy_tClockStatus)
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00f      	beq.n	8000592 <RCC_voidSetClockStatus+0xb6>
 8000572:	2b01      	cmp	r3, #1
 8000574:	d119      	bne.n	80005aa <RCC_voidSetClockStatus+0xce>
					SET_BIT(RCC->CR, 24);
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 800057c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000580:	6013      	str	r3, [r2, #0]
					while(0 == GET_BIT(RCC->CR, 25));
 8000582:	bf00      	nop
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <RCC_voidSetClockStatus+0xa8>
					break;
 8000590:	e006      	b.n	80005a0 <RCC_voidSetClockStatus+0xc4>
					CLR_BIT(RCC->CR, 24);
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <RCC_voidSetClockStatus+0xdc>)
 8000598:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800059c:	6013      	str	r3, [r2, #0]
					break;
 800059e:	bf00      	nop
				break;
 80005a0:	e003      	b.n	80005aa <RCC_voidSetClockStatus+0xce>
		break;
 80005a2:	bf00      	nop
 80005a4:	e002      	b.n	80005ac <RCC_voidSetClockStatus+0xd0>
			break;
 80005a6:	bf00      	nop
 80005a8:	e000      	b.n	80005ac <RCC_voidSetClockStatus+0xd0>
				break;
 80005aa:	bf00      	nop
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <RCC_voidSetSystemClock>:


void RCC_voidSetSystemClock(RCC_clkType_t copy_tClockType)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	switch(copy_tClockType)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d020      	beq.n	800060e <RCC_voidSetSystemClock+0x52>
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	dc2b      	bgt.n	8000628 <RCC_voidSetSystemClock+0x6c>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <RCC_voidSetSystemClock+0x1e>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00d      	beq.n	80005f4 <RCC_voidSetSystemClock+0x38>
	case RCC_CLK_PLL:
		CLR_BIT(RCC->CFGR, 0);
		SET_BIT(RCC->CFGR, 1);
		break;
	}
}
 80005d8:	e026      	b.n	8000628 <RCC_voidSetSystemClock+0x6c>
		CLR_BIT(RCC->CFGR, 0);
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, 1);
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 80005ec:	f023 0302 	bic.w	r3, r3, #2
 80005f0:	6053      	str	r3, [r2, #4]
		break;
 80005f2:	e019      	b.n	8000628 <RCC_voidSetSystemClock+0x6c>
		SET_BIT(RCC->CFGR, 0);
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->CFGR, 1);
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 8000606:	f023 0302 	bic.w	r3, r3, #2
 800060a:	6053      	str	r3, [r2, #4]
		break;
 800060c:	e00c      	b.n	8000628 <RCC_voidSetSystemClock+0x6c>
		CLR_BIT(RCC->CFGR, 0);
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 8000614:	f023 0301 	bic.w	r3, r3, #1
 8000618:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR, 1);
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <RCC_voidSetSystemClock+0x78>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6053      	str	r3, [r2, #4]
		break;
 8000626:	bf00      	nop
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000

08000638 <RCC_voidEnable_AHB_clock>:
	}
}


void RCC_voidEnable_AHB_clock(RCC_AHB_peripherals_t copy_tPeripheral)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	switch(copy_tPeripheral)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b10      	cmp	r3, #16
 8000646:	f200 809c 	bhi.w	8000782 <RCC_voidEnable_AHB_clock+0x14a>
 800064a:	a201      	add	r2, pc, #4	@ (adr r2, 8000650 <RCC_voidEnable_AHB_clock+0x18>)
 800064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000650:	08000695 	.word	0x08000695
 8000654:	080006a3 	.word	0x080006a3
 8000658:	080006b1 	.word	0x080006b1
 800065c:	080006bf 	.word	0x080006bf
 8000660:	080006cd 	.word	0x080006cd
 8000664:	080006db 	.word	0x080006db
 8000668:	080006e9 	.word	0x080006e9
 800066c:	080006f7 	.word	0x080006f7
 8000670:	08000705 	.word	0x08000705
 8000674:	08000713 	.word	0x08000713
 8000678:	08000721 	.word	0x08000721
 800067c:	0800072f 	.word	0x0800072f
 8000680:	0800073d 	.word	0x0800073d
 8000684:	0800074b 	.word	0x0800074b
 8000688:	08000759 	.word	0x08000759
 800068c:	08000767 	.word	0x08000767
 8000690:	08000775 	.word	0x08000775
	{
		case RCC_AHB_DMA1EN:
		SET_BIT(RCC->AHBENR, 0);
 8000694:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a3d      	ldr	r2, [pc, #244]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6153      	str	r3, [r2, #20]
		break;
 80006a0:	e06f      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_DMA2EN:
		SET_BIT(RCC->AHBENR, 1);
 80006a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6153      	str	r3, [r2, #20]
		break;
 80006ae:	e068      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_SRAMEN:
		SET_BIT(RCC->AHBENR, 2);
 80006b0:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a36      	ldr	r2, [pc, #216]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6153      	str	r3, [r2, #20]
		break;
 80006bc:	e061      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_FLITFEN:
		SET_BIT(RCC->AHBENR, 4);
 80006be:	4b34      	ldr	r3, [pc, #208]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a33      	ldr	r2, [pc, #204]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006c4:	f043 0310 	orr.w	r3, r3, #16
 80006c8:	6153      	str	r3, [r2, #20]
		break;
 80006ca:	e05a      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_FMCEN:
		SET_BIT(RCC->AHBENR, 5);
 80006cc:	4b30      	ldr	r3, [pc, #192]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6153      	str	r3, [r2, #20]
		break;
 80006d8:	e053      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_CRCEN:
		SET_BIT(RCC->AHBENR, 6);
 80006da:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a2c      	ldr	r2, [pc, #176]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e4:	6153      	str	r3, [r2, #20]
		break;
 80006e6:	e04c      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPHEN:
		SET_BIT(RCC->AHBENR, 16);
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a28      	ldr	r2, [pc, #160]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006f2:	6153      	str	r3, [r2, #20]
		break;
 80006f4:	e045      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPAEN:
		SET_BIT(RCC->AHBENR, 17);
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a25      	ldr	r2, [pc, #148]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000700:	6153      	str	r3, [r2, #20]
		break;
 8000702:	e03e      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPBEN:
		SET_BIT(RCC->AHBENR, 18);
 8000704:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800070a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800070e:	6153      	str	r3, [r2, #20]
		break;
 8000710:	e037      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPCEN:
		SET_BIT(RCC->AHBENR, 19);
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000718:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800071c:	6153      	str	r3, [r2, #20]
		break;
 800071e:	e030      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPDEN:
		SET_BIT(RCC->AHBENR, 20);
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	4a1a      	ldr	r2, [pc, #104]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800072a:	6153      	str	r3, [r2, #20]
		break;
 800072c:	e029      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPEEN:
		SET_BIT(RCC->AHBENR, 21);
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000738:	6153      	str	r3, [r2, #20]
		break;
 800073a:	e022      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPFEN:
		SET_BIT(RCC->AHBENR, 22);
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000742:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000746:	6153      	str	r3, [r2, #20]
		break;
 8000748:	e01b      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_IOPGEN:
		SET_BIT(RCC->AHBENR, 23);
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a10      	ldr	r2, [pc, #64]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000750:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000754:	6153      	str	r3, [r2, #20]
		break;
 8000756:	e014      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_TSCEN:
		SET_BIT(RCC->AHBENR, 24);
 8000758:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800075e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000762:	6153      	str	r3, [r2, #20]
		break;
 8000764:	e00d      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_ADC12EN:
		SET_BIT(RCC->AHBENR, 28);
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6153      	str	r3, [r2, #20]
		break;
 8000772:	e006      	b.n	8000782 <RCC_voidEnable_AHB_clock+0x14a>
		
		case RCC_AHB_ADC34EN:
		SET_BIT(RCC->AHBENR, 29);
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <RCC_voidEnable_AHB_clock+0x158>)
 800077a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800077e:	6153      	str	r3, [r2, #20]
		break;
 8000780:	bf00      	nop
	}
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <main>:
#include "ERROR_TYPE.h"
#include "RCC_interface.h"
#include "GPIO_interface.h"

int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	RCC_voidSetClockStatus(RCC_CLK_HSI, RCC_CLK_ON);
 8000798:	2101      	movs	r1, #1
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff fe9e 	bl	80004dc <RCC_voidSetClockStatus>
	RCC_voidSetSystemClock(RCC_CLK_HSI);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff0b 	bl	80005bc <RCC_voidSetSystemClock>
	RCC_voidEnable_AHB_clock(RCC_AHB_IOPAEN);
 80007a6:	2007      	movs	r0, #7
 80007a8:	f7ff ff46 	bl	8000638 <RCC_voidEnable_AHB_clock>

	for(;;)
	{
		display_num();
 80007ac:	f000 f802 	bl	80007b4 <display_num>
	{
 80007b0:	bf00      	nop
 80007b2:	e7fb      	b.n	80007ac <main+0x18>

080007b4 <display_num>:
	};
}

void display_num()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	@ 0x38
 80007b8:	af00      	add	r7, sp, #0
	GPIO_pinConfig_t A = {.portId = GPIO_PORTB,.pinId = GPIO_PIN0,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 80007ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	f8c3 2003 	str.w	r2, [r3, #3]
 80007c6:	2301      	movs	r3, #1
 80007c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80007cc:	2301      	movs	r3, #1
 80007ce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	GPIO_pinConfig_t B = {.portId = GPIO_PORTB,.pinId = GPIO_PIN1,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 80007d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	f8c3 2003 	str.w	r2, [r3, #3]
 80007de:	2301      	movs	r3, #1
 80007e0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80007ea:	2301      	movs	r3, #1
 80007ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	GPIO_pinConfig_t C = {.portId = GPIO_PORTB,.pinId = GPIO_PIN2,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	f8c3 2003 	str.w	r2, [r3, #3]
 80007fc:	2301      	movs	r3, #1
 80007fe:	f887 3020 	strb.w	r3, [r7, #32]
 8000802:	2302      	movs	r3, #2
 8000804:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8000808:	2301      	movs	r3, #1
 800080a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_pinConfig_t D = {.portId = GPIO_PORTB,.pinId = GPIO_PIN3,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	f8c3 2003 	str.w	r2, [r3, #3]
 800081a:	2301      	movs	r3, #1
 800081c:	763b      	strb	r3, [r7, #24]
 800081e:	2303      	movs	r3, #3
 8000820:	767b      	strb	r3, [r7, #25]
 8000822:	2301      	movs	r3, #1
 8000824:	76bb      	strb	r3, [r7, #26]
	GPIO_pinConfig_t E = {.portId = GPIO_PORTB,.pinId = GPIO_PIN4,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000832:	2301      	movs	r3, #1
 8000834:	743b      	strb	r3, [r7, #16]
 8000836:	2304      	movs	r3, #4
 8000838:	747b      	strb	r3, [r7, #17]
 800083a:	2301      	movs	r3, #1
 800083c:	74bb      	strb	r3, [r7, #18]
	GPIO_pinConfig_t F = {.portId = GPIO_PORTB,.pinId = GPIO_PIN5,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	f8c3 2003 	str.w	r2, [r3, #3]
 800084a:	2301      	movs	r3, #1
 800084c:	723b      	strb	r3, [r7, #8]
 800084e:	2305      	movs	r3, #5
 8000850:	727b      	strb	r3, [r7, #9]
 8000852:	2301      	movs	r3, #1
 8000854:	72bb      	strb	r3, [r7, #10]
	GPIO_pinConfig_t G = {.portId = GPIO_PORTB,.pinId = GPIO_PIN6,.pinMode = GPIO_OUTPUT,.pinOutputType = GPIO_PUSH_PULL};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	f8c3 2003 	str.w	r2, [r3, #3]
 8000860:	2301      	movs	r3, #1
 8000862:	703b      	strb	r3, [r7, #0]
 8000864:	2306      	movs	r3, #6
 8000866:	707b      	strb	r3, [r7, #1]
 8000868:	2301      	movs	r3, #1
 800086a:	70bb      	strb	r3, [r7, #2]

	GPIO_u8InitPin(&A);
 800086c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcaf 	bl	80001d4 <GPIO_u8InitPin>
	GPIO_u8InitPin(&B);
 8000876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fcaa 	bl	80001d4 <GPIO_u8InitPin>
	GPIO_u8InitPin(&C);
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fca5 	bl	80001d4 <GPIO_u8InitPin>
	GPIO_u8InitPin(&D);
 800088a:	f107 0318 	add.w	r3, r7, #24
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fca0 	bl	80001d4 <GPIO_u8InitPin>
	GPIO_u8InitPin(&E);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fc9b 	bl	80001d4 <GPIO_u8InitPin>
	GPIO_u8InitPin(&F);
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc96 	bl	80001d4 <GPIO_u8InitPin>
	GPIO_u8InitPin(&G);
 80008a8:	463b      	mov	r3, r7
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fc92 	bl	80001d4 <GPIO_u8InitPin>

	// print (5)

	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN0, GPIO_PIN_HIGH); //A
 80008b0:	2201      	movs	r2, #1
 80008b2:	2100      	movs	r1, #0
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fdc9 	bl	800044c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN1, GPIO_PIN_LOW);  //B
 80008ba:	2200      	movs	r2, #0
 80008bc:	2101      	movs	r1, #1
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fdc4 	bl	800044c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN2, GPIO_PIN_HIGH); //C
 80008c4:	2201      	movs	r2, #1
 80008c6:	2102      	movs	r1, #2
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff fdbf 	bl	800044c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN3, GPIO_PIN_HIGH); //D
 80008ce:	2201      	movs	r2, #1
 80008d0:	2103      	movs	r1, #3
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fdba 	bl	800044c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN4, GPIO_PIN_LOW);  //E
 80008d8:	2200      	movs	r2, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fdb5 	bl	800044c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN5, GPIO_PIN_HIGH); //F
 80008e2:	2201      	movs	r2, #1
 80008e4:	2105      	movs	r1, #5
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fdb0 	bl	800044c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(GPIO_PORTB, GPIO_PIN6, GPIO_PIN_HIGH); //G
 80008ec:	2201      	movs	r2, #1
 80008ee:	2106      	movs	r1, #6
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fdab 	bl	800044c <GPIO_u8SetPinValue>



}
 80008f6:	bf00      	nop
 80008f8:	3738      	adds	r7, #56	@ 0x38
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000904:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	@ (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	@ (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092e:	f000 f811 	bl	8000954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff ff2f 	bl	8000794 <main>

08000936 <LoopForever>:

LoopForever:
  b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000944:	080009bc 	.word	0x080009bc
  ldr r2, =_sbss
 8000948:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800094c:	2000003c 	.word	0x2000003c

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>
	...

08000954 <__libc_init_array>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4d0d      	ldr	r5, [pc, #52]	@ (800098c <__libc_init_array+0x38>)
 8000958:	4c0d      	ldr	r4, [pc, #52]	@ (8000990 <__libc_init_array+0x3c>)
 800095a:	1b64      	subs	r4, r4, r5
 800095c:	10a4      	asrs	r4, r4, #2
 800095e:	2600      	movs	r6, #0
 8000960:	42a6      	cmp	r6, r4
 8000962:	d109      	bne.n	8000978 <__libc_init_array+0x24>
 8000964:	4d0b      	ldr	r5, [pc, #44]	@ (8000994 <__libc_init_array+0x40>)
 8000966:	4c0c      	ldr	r4, [pc, #48]	@ (8000998 <__libc_init_array+0x44>)
 8000968:	f000 f818 	bl	800099c <_init>
 800096c:	1b64      	subs	r4, r4, r5
 800096e:	10a4      	asrs	r4, r4, #2
 8000970:	2600      	movs	r6, #0
 8000972:	42a6      	cmp	r6, r4
 8000974:	d105      	bne.n	8000982 <__libc_init_array+0x2e>
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f855 3b04 	ldr.w	r3, [r5], #4
 800097c:	4798      	blx	r3
 800097e:	3601      	adds	r6, #1
 8000980:	e7ee      	b.n	8000960 <__libc_init_array+0xc>
 8000982:	f855 3b04 	ldr.w	r3, [r5], #4
 8000986:	4798      	blx	r3
 8000988:	3601      	adds	r6, #1
 800098a:	e7f2      	b.n	8000972 <__libc_init_array+0x1e>
 800098c:	080009b4 	.word	0x080009b4
 8000990:	080009b4 	.word	0x080009b4
 8000994:	080009b4 	.word	0x080009b4
 8000998:	080009b8 	.word	0x080009b8

0800099c <_init>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	bf00      	nop
 80009a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a2:	bc08      	pop	{r3}
 80009a4:	469e      	mov	lr, r3
 80009a6:	4770      	bx	lr

080009a8 <_fini>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	bf00      	nop
 80009ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ae:	bc08      	pop	{r3}
 80009b0:	469e      	mov	lr, r3
 80009b2:	4770      	bx	lr
