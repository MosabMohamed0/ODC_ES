
Caculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00001110  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800082  00800082  000011c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c2a  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000baf  00000000  00000000  0000304e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ac  00000000  00000000  00003bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00004dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096f  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014eb  00000000  00000000  00005c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00007176  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_4>
      14:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_9>
      28:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_10>
      2c:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 04 	call	0x818	; 0x818 <main>
      8a:	0c 94 86 08 	jmp	0x110c	; 0x110c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
		case DIO_PORTC:
			TOG_BIT(PORTC_REG, copy_u8PinId);
			break;

		case DIO_PORTD:
			TOG_BIT(PORTD_REG, copy_u8PinId);
      92:	84 30       	cpi	r24, 0x04	; 4
      94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
      96:	7e c0       	rjmp	.+252    	; 0x194 <DIO_voidSetPinDirection+0x102>
      98:	68 30       	cpi	r22, 0x08	; 8
      9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
      9c:	7b c0       	rjmp	.+246    	; 0x194 <DIO_voidSetPinDirection+0x102>
      9e:	42 30       	cpi	r20, 0x02	; 2
      a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_voidSetPinDirection+0x12>
      a2:	78 c0       	rjmp	.+240    	; 0x194 <DIO_voidSetPinDirection+0x102>
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	19 f1       	breq	.+70     	; 0xee <DIO_voidSetPinDirection+0x5c>
      a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_voidSetPinDirection+0x24>
      aa:	82 30       	cpi	r24, 0x02	; 2
      ac:	e1 f1       	breq	.+120    	; 0x126 <DIO_voidSetPinDirection+0x94>
      ae:	83 30       	cpi	r24, 0x03	; 3
      b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_voidSetPinDirection+0x22>
      b2:	55 c0       	rjmp	.+170    	; 0x15e <DIO_voidSetPinDirection+0xcc>
      b4:	08 95       	ret
      b6:	44 23       	and	r20, r20
      b8:	19 f0       	breq	.+6      	; 0xc0 <DIO_voidSetPinDirection+0x2e>
      ba:	41 30       	cpi	r20, 0x01	; 1
      bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_voidSetPinDirection+0x46>
      be:	08 95       	ret
      c0:	2a b3       	in	r18, 0x1a	; 26
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_voidSetPinDirection+0x3a>
      c8:	88 0f       	add	r24, r24
      ca:	99 1f       	adc	r25, r25
      cc:	6a 95       	dec	r22
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_voidSetPinDirection+0x36>
      d0:	80 95       	com	r24
      d2:	82 23       	and	r24, r18
      d4:	8a bb       	out	0x1a, r24	; 26
      d6:	08 95       	ret
      d8:	2a b3       	in	r18, 0x1a	; 26
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinDirection+0x52>
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	6a 95       	dec	r22
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinDirection+0x4e>
      e8:	82 2b       	or	r24, r18
      ea:	8a bb       	out	0x1a, r24	; 26
      ec:	08 95       	ret
      ee:	44 23       	and	r20, r20
      f0:	19 f0       	breq	.+6      	; 0xf8 <DIO_voidSetPinDirection+0x66>
      f2:	41 30       	cpi	r20, 0x01	; 1
      f4:	69 f0       	breq	.+26     	; 0x110 <DIO_voidSetPinDirection+0x7e>
      f6:	08 95       	ret
      f8:	27 b3       	in	r18, 0x17	; 23
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x72>
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	6a 95       	dec	r22
     106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x6e>
     108:	80 95       	com	r24
     10a:	82 23       	and	r24, r18
     10c:	87 bb       	out	0x17, r24	; 23
     10e:	08 95       	ret
     110:	27 b3       	in	r18, 0x17	; 23
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0x8a>
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	6a 95       	dec	r22
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0x86>
     120:	82 2b       	or	r24, r18
     122:	87 bb       	out	0x17, r24	; 23
     124:	08 95       	ret
     126:	44 23       	and	r20, r20
     128:	19 f0       	breq	.+6      	; 0x130 <DIO_voidSetPinDirection+0x9e>
     12a:	41 30       	cpi	r20, 0x01	; 1
     12c:	69 f0       	breq	.+26     	; 0x148 <DIO_voidSetPinDirection+0xb6>
     12e:	08 95       	ret
     130:	24 b3       	in	r18, 0x14	; 20
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinDirection+0xaa>
     138:	88 0f       	add	r24, r24
     13a:	99 1f       	adc	r25, r25
     13c:	6a 95       	dec	r22
     13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinDirection+0xa6>
     140:	80 95       	com	r24
     142:	82 23       	and	r24, r18
     144:	84 bb       	out	0x14, r24	; 20
     146:	08 95       	ret
     148:	24 b3       	in	r18, 0x14	; 20
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinDirection+0xc2>
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinDirection+0xbe>
     158:	82 2b       	or	r24, r18
     15a:	84 bb       	out	0x14, r24	; 20
     15c:	08 95       	ret
     15e:	44 23       	and	r20, r20
     160:	19 f0       	breq	.+6      	; 0x168 <DIO_voidSetPinDirection+0xd6>
     162:	41 30       	cpi	r20, 0x01	; 1
     164:	69 f0       	breq	.+26     	; 0x180 <DIO_voidSetPinDirection+0xee>
     166:	08 95       	ret
     168:	21 b3       	in	r18, 0x11	; 17
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0xe2>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0xde>
     178:	80 95       	com	r24
     17a:	82 23       	and	r24, r18
     17c:	81 bb       	out	0x11, r24	; 17
     17e:	08 95       	ret
     180:	21 b3       	in	r18, 0x11	; 17
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinDirection+0xfa>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinDirection+0xf6>
     190:	82 2b       	or	r24, r18
     192:	81 bb       	out	0x11, r24	; 17
     194:	08 95       	ret

00000196 <DIO_voidSetPinValue>:
     196:	84 30       	cpi	r24, 0x04	; 4
     198:	08 f0       	brcs	.+2      	; 0x19c <DIO_voidSetPinValue+0x6>
     19a:	7e c0       	rjmp	.+252    	; 0x298 <DIO_voidSetPinValue+0x102>
     19c:	68 30       	cpi	r22, 0x08	; 8
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <DIO_voidSetPinValue+0xc>
     1a0:	7b c0       	rjmp	.+246    	; 0x298 <DIO_voidSetPinValue+0x102>
     1a2:	42 30       	cpi	r20, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <DIO_voidSetPinValue+0x12>
     1a6:	78 c0       	rjmp	.+240    	; 0x298 <DIO_voidSetPinValue+0x102>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	19 f1       	breq	.+70     	; 0x1f2 <DIO_voidSetPinValue+0x5c>
     1ac:	30 f0       	brcs	.+12     	; 0x1ba <DIO_voidSetPinValue+0x24>
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	e1 f1       	breq	.+120    	; 0x22a <DIO_voidSetPinValue+0x94>
     1b2:	83 30       	cpi	r24, 0x03	; 3
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_voidSetPinValue+0x22>
     1b6:	55 c0       	rjmp	.+170    	; 0x262 <DIO_voidSetPinValue+0xcc>
     1b8:	08 95       	ret
     1ba:	44 23       	and	r20, r20
     1bc:	19 f0       	breq	.+6      	; 0x1c4 <DIO_voidSetPinValue+0x2e>
     1be:	41 30       	cpi	r20, 0x01	; 1
     1c0:	69 f0       	breq	.+26     	; 0x1dc <DIO_voidSetPinValue+0x46>
     1c2:	08 95       	ret
     1c4:	2b b3       	in	r18, 0x1b	; 27
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_voidSetPinValue+0x3a>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	6a 95       	dec	r22
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_voidSetPinValue+0x36>
     1d4:	80 95       	com	r24
     1d6:	82 23       	and	r24, r18
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret
     1dc:	2b b3       	in	r18, 0x1b	; 27
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinValue+0x52>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	6a 95       	dec	r22
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinValue+0x4e>
     1ec:	82 2b       	or	r24, r18
     1ee:	8b bb       	out	0x1b, r24	; 27
     1f0:	08 95       	ret
     1f2:	44 23       	and	r20, r20
     1f4:	19 f0       	breq	.+6      	; 0x1fc <DIO_voidSetPinValue+0x66>
     1f6:	41 30       	cpi	r20, 0x01	; 1
     1f8:	69 f0       	breq	.+26     	; 0x214 <DIO_voidSetPinValue+0x7e>
     1fa:	08 95       	ret
     1fc:	28 b3       	in	r18, 0x18	; 24
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x72>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	6a 95       	dec	r22
     20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x6e>
     20c:	80 95       	com	r24
     20e:	82 23       	and	r24, r18
     210:	88 bb       	out	0x18, r24	; 24
     212:	08 95       	ret
     214:	28 b3       	in	r18, 0x18	; 24
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0x8a>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	6a 95       	dec	r22
     222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0x86>
     224:	82 2b       	or	r24, r18
     226:	88 bb       	out	0x18, r24	; 24
     228:	08 95       	ret
     22a:	44 23       	and	r20, r20
     22c:	19 f0       	breq	.+6      	; 0x234 <DIO_voidSetPinValue+0x9e>
     22e:	41 30       	cpi	r20, 0x01	; 1
     230:	69 f0       	breq	.+26     	; 0x24c <DIO_voidSetPinValue+0xb6>
     232:	08 95       	ret
     234:	25 b3       	in	r18, 0x15	; 21
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinValue+0xaa>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	6a 95       	dec	r22
     242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinValue+0xa6>
     244:	80 95       	com	r24
     246:	82 23       	and	r24, r18
     248:	85 bb       	out	0x15, r24	; 21
     24a:	08 95       	ret
     24c:	25 b3       	in	r18, 0x15	; 21
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0xc2>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	6a 95       	dec	r22
     25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0xbe>
     25c:	82 2b       	or	r24, r18
     25e:	85 bb       	out	0x15, r24	; 21
     260:	08 95       	ret
     262:	44 23       	and	r20, r20
     264:	19 f0       	breq	.+6      	; 0x26c <DIO_voidSetPinValue+0xd6>
     266:	41 30       	cpi	r20, 0x01	; 1
     268:	69 f0       	breq	.+26     	; 0x284 <DIO_voidSetPinValue+0xee>
     26a:	08 95       	ret
     26c:	22 b3       	in	r18, 0x12	; 18
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPinValue+0xe2>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	6a 95       	dec	r22
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPinValue+0xde>
     27c:	80 95       	com	r24
     27e:	82 23       	and	r24, r18
     280:	82 bb       	out	0x12, r24	; 18
     282:	08 95       	ret
     284:	22 b3       	in	r18, 0x12	; 18
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidSetPinValue+0xfa>
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidSetPinValue+0xf6>
     294:	82 2b       	or	r24, r18
     296:	82 bb       	out	0x12, r24	; 18
     298:	08 95       	ret

0000029a <DIO_voidGetPinValue>:
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	c0 f5       	brcc	.+112    	; 0x30e <DIO_voidGetPinValue+0x74>
     29e:	68 30       	cpi	r22, 0x08	; 8
     2a0:	b0 f5       	brcc	.+108    	; 0x30e <DIO_voidGetPinValue+0x74>
     2a2:	41 15       	cp	r20, r1
     2a4:	51 05       	cpc	r21, r1
     2a6:	99 f1       	breq	.+102    	; 0x30e <DIO_voidGetPinValue+0x74>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	89 f0       	breq	.+34     	; 0x2ce <DIO_voidGetPinValue+0x34>
     2ac:	28 f0       	brcs	.+10     	; 0x2b8 <DIO_voidGetPinValue+0x1e>
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	c9 f0       	breq	.+50     	; 0x2e4 <DIO_voidGetPinValue+0x4a>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	11 f1       	breq	.+68     	; 0x2fa <DIO_voidGetPinValue+0x60>
     2b6:	08 95       	ret
     2b8:	89 b3       	in	r24, 0x19	; 25
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_voidGetPinValue+0x28>
     2be:	95 95       	asr	r25
     2c0:	87 95       	ror	r24
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_voidGetPinValue+0x24>
     2c6:	81 70       	andi	r24, 0x01	; 1
     2c8:	fa 01       	movw	r30, r20
     2ca:	80 83       	st	Z, r24
     2cc:	08 95       	ret
     2ce:	86 b3       	in	r24, 0x16	; 22
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_voidGetPinValue+0x3e>
     2d4:	95 95       	asr	r25
     2d6:	87 95       	ror	r24
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_voidGetPinValue+0x3a>
     2dc:	81 70       	andi	r24, 0x01	; 1
     2de:	fa 01       	movw	r30, r20
     2e0:	80 83       	st	Z, r24
     2e2:	08 95       	ret
     2e4:	83 b3       	in	r24, 0x13	; 19
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidGetPinValue+0x54>
     2ea:	95 95       	asr	r25
     2ec:	87 95       	ror	r24
     2ee:	6a 95       	dec	r22
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidGetPinValue+0x50>
     2f2:	81 70       	andi	r24, 0x01	; 1
     2f4:	fa 01       	movw	r30, r20
     2f6:	80 83       	st	Z, r24
     2f8:	08 95       	ret
     2fa:	80 b3       	in	r24, 0x10	; 16
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidGetPinValue+0x6a>
     300:	95 95       	asr	r25
     302:	87 95       	ror	r24
     304:	6a 95       	dec	r22
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidGetPinValue+0x66>
     308:	81 70       	andi	r24, 0x01	; 1
     30a:	fa 01       	movw	r30, r20
     30c:	80 83       	st	Z, r24
     30e:	08 95       	ret

00000310 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	a8 f5       	brcc	.+106    	; 0x37e <DIO_voidActivePinInPullUpResistance+0x6e>
     314:	68 30       	cpi	r22, 0x08	; 8
     316:	98 f5       	brcc	.+102    	; 0x37e <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	89 f0       	breq	.+34     	; 0x33e <DIO_voidActivePinInPullUpResistance+0x2e>
     31c:	28 f0       	brcs	.+10     	; 0x328 <DIO_voidActivePinInPullUpResistance+0x18>
     31e:	82 30       	cpi	r24, 0x02	; 2
     320:	c9 f0       	breq	.+50     	; 0x354 <DIO_voidActivePinInPullUpResistance+0x44>
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	11 f1       	breq	.+68     	; 0x36a <DIO_voidActivePinInPullUpResistance+0x5a>
     326:	08 95       	ret
		{
		case DIO_PORTA:
			SET_BIT(PORTA_REG, copy_u8PinId);
     328:	2b b3       	in	r18, 0x1b	; 27
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_voidActivePinInPullUpResistance+0x24>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	6a 95       	dec	r22
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_voidActivePinInPullUpResistance+0x20>
     338:	82 2b       	or	r24, r18
     33a:	8b bb       	out	0x1b, r24	; 27
			break;
     33c:	08 95       	ret

		case DIO_PORTB:
			SET_BIT(PORTB_REG, copy_u8PinId);
     33e:	28 b3       	in	r18, 0x18	; 24
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_voidActivePinInPullUpResistance+0x3a>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_voidActivePinInPullUpResistance+0x36>
     34e:	82 2b       	or	r24, r18
     350:	88 bb       	out	0x18, r24	; 24
			break;
     352:	08 95       	ret

		case DIO_PORTC:
			SET_BIT(PORTC_REG, copy_u8PinId);
     354:	25 b3       	in	r18, 0x15	; 21
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_voidActivePinInPullUpResistance+0x50>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	6a 95       	dec	r22
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_voidActivePinInPullUpResistance+0x4c>
     364:	82 2b       	or	r24, r18
     366:	85 bb       	out	0x15, r24	; 21
			break;
     368:	08 95       	ret

		case DIO_PORTD:
			SET_BIT(PORTD_REG, copy_u8PinId);
     36a:	22 b3       	in	r18, 0x12	; 18
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_voidActivePinInPullUpResistance+0x66>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	6a 95       	dec	r22
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_voidActivePinInPullUpResistance+0x62>
     37a:	82 2b       	or	r24, r18
     37c:	82 bb       	out	0x12, r24	; 18
     37e:	08 95       	ret

00000380 <KPD_voidInit>:
 * @retVal void
 */
void KPD_voidInit(void)
{
	/* Config ROWS pins as I/P pins */ 
	DIO_voidSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	62 e0       	ldi	r22, 0x02	; 2
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	63 e0       	ldi	r22, 0x03	; 3
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>

	/* Activate Internal pull up for ROWS pins */ 
	DIO_voidActivePinInPullUpResistance(KPD_ROW0_PORT, KPD_ROW0_PIN);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	0e 94 88 01 	call	0x310	; 0x310 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW1_PORT, KPD_ROW1_PIN);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 88 01 	call	0x310	; 0x310 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW2_PORT, KPD_ROW2_PIN);
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	0e 94 88 01 	call	0x310	; 0x310 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW3_PORT, KPD_ROW3_PIN);
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	0e 94 88 01 	call	0x310	; 0x310 <DIO_voidActivePinInPullUpResistance>

	/* Config COLS pins as O/P pins */
	DIO_voidSetPinDirection(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_OUTPUT);
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	64 e0       	ldi	r22, 0x04	; 4
     3cc:	83 e0       	ldi	r24, 0x03	; 3
     3ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_OUTPUT);
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	65 e0       	ldi	r22, 0x05	; 5
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_OUTPUT);
     3dc:	41 e0       	ldi	r20, 0x01	; 1
     3de:	66 e0       	ldi	r22, 0x06	; 6
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_OUTPUT);
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	67 e0       	ldi	r22, 0x07	; 7
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>

	/* Set COLS pins as Initialy high */ 
	DIO_voidSetPinValue(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_HIGH);
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	64 e0       	ldi	r22, 0x04	; 4
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_HIGH);
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	65 e0       	ldi	r22, 0x05	; 5
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_HIGH);
     404:	41 e0       	ldi	r20, 0x01	; 1
     406:	66 e0       	ldi	r22, 0x06	; 6
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_HIGH);
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	67 e0       	ldi	r22, 0x07	; 7
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     418:	08 95       	ret

0000041a <KPD_voidGetValue>:
 * @brief the function Loop on COLS and activate each one, Loop on ROWS and check each one  
 * @param[out] copy_pu8ReturnedValue: The ASCII of pressed key if there is one.
 * @retVal void
 */
void KPD_voidGetValue(u8* copy_pu8ReturnedValue)
{
     41a:	6f 92       	push	r6
     41c:	7f 92       	push	r7
     41e:	8f 92       	push	r8
     420:	9f 92       	push	r9
     422:	af 92       	push	r10
     424:	bf 92       	push	r11
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	a1 97       	sbiw	r28, 0x21	; 33
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
	if(copy_pu8ReturnedValue != NULL)
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	09 f4       	brne	.+2      	; 0x44c <KPD_voidGetValue+0x32>
     44a:	84 c0       	rjmp	.+264    	; 0x554 <KPD_voidGetValue+0x13a>
     44c:	5c 01       	movw	r10, r24
	{
		u8 local_u8ColsCounter, local_u8RowsCounter;
		u8 local_u8PinState;
		u8 local_u8ColsPorts[4] = {KPD_COL0_PORT, KPD_COL1_PORT, KPD_COL2_PORT, KPD_COL3_PORT};
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	8d 8f       	std	Y+29, r24	; 0x1d
     452:	8e 8f       	std	Y+30, r24	; 0x1e
     454:	8f 8f       	std	Y+31, r24	; 0x1f
     456:	88 a3       	std	Y+32, r24	; 0x20
		u8 local_u8ColsPins [4] = {KPD_COL0_PIN , KPD_COL1_PIN , KPD_COL2_PIN , KPD_COL3_PIN};
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	99 8f       	std	Y+25, r25	; 0x19
     45c:	95 e0       	ldi	r25, 0x05	; 5
     45e:	9a 8f       	std	Y+26, r25	; 0x1a
     460:	96 e0       	ldi	r25, 0x06	; 6
     462:	9b 8f       	std	Y+27, r25	; 0x1b
     464:	97 e0       	ldi	r25, 0x07	; 7
     466:	9c 8f       	std	Y+28, r25	; 0x1c
		u8 local_u8RowsPorts[4] = {KPD_ROW0_PORT, KPD_ROW1_PORT, KPD_ROW2_PORT, KPD_ROW3_PORT};
     468:	8d 8b       	std	Y+21, r24	; 0x15
     46a:	8e 8b       	std	Y+22, r24	; 0x16
     46c:	8f 8b       	std	Y+23, r24	; 0x17
     46e:	88 8f       	std	Y+24, r24	; 0x18
		u8 local_u8RowsPins [4] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};
     470:	19 8a       	std	Y+17, r1	; 0x11
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	9a 8b       	std	Y+18, r25	; 0x12
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	9b 8b       	std	Y+19, r25	; 0x13
     47a:	8c 8b       	std	Y+20, r24	; 0x14
		u8 local_u8KPD_Chars[4][4] = KPD_KEYS; 
     47c:	80 e1       	ldi	r24, 0x10	; 16
     47e:	e0 e6       	ldi	r30, 0x60	; 96
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	de 01       	movw	r26, r28
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <KPD_voidGetValue+0x6c>

		//                     *copy_pu8ReturnedValue = KPD_NOT_PRESSED;                              (my)
		
		
		for(local_u8ColsCounter = 0;local_u8ColsCounter < 4; local_u8ColsCounter++)
     48e:	00 e0       	ldi	r16, 0x00	; 0
     490:	5e c0       	rjmp	.+188    	; 0x54e <KPD_voidGetValue+0x134>
		{
			/* Activate Each Column with low value */
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
     492:	c0 2e       	mov	r12, r16
     494:	d1 2c       	mov	r13, r1
     496:	e9 e1       	ldi	r30, 0x19	; 25
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	ec 0f       	add	r30, r28
     49c:	fd 1f       	adc	r31, r29
     49e:	ec 0d       	add	r30, r12
     4a0:	fd 1d       	adc	r31, r13
     4a2:	80 80       	ld	r8, Z
     4a4:	ed e1       	ldi	r30, 0x1D	; 29
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	ec 0f       	add	r30, r28
     4aa:	fd 1f       	adc	r31, r29
     4ac:	ec 0d       	add	r30, r12
     4ae:	fd 1d       	adc	r31, r13
     4b0:	90 80       	ld	r9, Z
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	68 2d       	mov	r22, r8
     4b6:	89 2d       	mov	r24, r9
     4b8:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	83 ec       	ldi	r24, 0xC3	; 195
     4be:	99 e0       	ldi	r25, 0x09	; 9
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <KPD_voidGetValue+0xa6>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <KPD_voidGetValue+0xac>
     4c6:	00 00       	nop
			_delay_ms(10);//my
			for(local_u8RowsCounter = 0; local_u8RowsCounter < 4; local_u8RowsCounter++)
     4c8:	10 e0       	ldi	r17, 0x00	; 0
     4ca:	37 c0       	rjmp	.+110    	; 0x53a <KPD_voidGetValue+0x120>
			{
				/* Check Each Row (if == 0?) */
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
     4cc:	e1 2e       	mov	r14, r17
     4ce:	f1 2c       	mov	r15, r1
     4d0:	e1 e1       	ldi	r30, 0x11	; 17
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	ec 0f       	add	r30, r28
     4d6:	fd 1f       	adc	r31, r29
     4d8:	ee 0d       	add	r30, r14
     4da:	ff 1d       	adc	r31, r15
     4dc:	70 80       	ld	r7, Z
     4de:	e5 e1       	ldi	r30, 0x15	; 21
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	ee 0d       	add	r30, r14
     4e8:	ff 1d       	adc	r31, r15
     4ea:	60 80       	ld	r6, Z
     4ec:	ae 01       	movw	r20, r28
     4ee:	4f 5d       	subi	r20, 0xDF	; 223
     4f0:	5f 4f       	sbci	r21, 0xFF	; 255
     4f2:	67 2d       	mov	r22, r7
     4f4:	86 2d       	mov	r24, r6
     4f6:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_voidGetPinValue>
				
				/* Is Pressed? */
				if(0 == local_u8PinState)
     4fa:	89 a1       	ldd	r24, Y+33	; 0x21
     4fc:	81 11       	cpse	r24, r1
     4fe:	1c c0       	rjmp	.+56     	; 0x538 <KPD_voidGetValue+0x11e>
     500:	07 c0       	rjmp	.+14     	; 0x510 <KPD_voidGetValue+0xf6>
				{
					while(0 == local_u8PinState)
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
     502:	ae 01       	movw	r20, r28
     504:	4f 5d       	subi	r20, 0xDF	; 223
     506:	5f 4f       	sbci	r21, 0xFF	; 255
     508:	67 2d       	mov	r22, r7
     50a:	86 2d       	mov	r24, r6
     50c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_voidGetPinValue>
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
				
				/* Is Pressed? */
				if(0 == local_u8PinState)
				{
					while(0 == local_u8PinState)
     510:	89 a1       	ldd	r24, Y+33	; 0x21
     512:	88 23       	and	r24, r24
     514:	b1 f3       	breq	.-20     	; 0x502 <KPD_voidGetValue+0xe8>
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
					}
					*copy_pu8ReturnedValue = local_u8KPD_Chars[local_u8RowsCounter][local_u8ColsCounter];
     516:	ee 0c       	add	r14, r14
     518:	ff 1c       	adc	r15, r15
     51a:	ee 0c       	add	r14, r14
     51c:	ff 1c       	adc	r15, r15
     51e:	e1 e0       	ldi	r30, 0x01	; 1
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	ec 0f       	add	r30, r28
     524:	fd 1f       	adc	r31, r29
     526:	ee 0e       	add	r14, r30
     528:	ff 1e       	adc	r15, r31
     52a:	f7 01       	movw	r30, r14
     52c:	ec 0d       	add	r30, r12
     52e:	fd 1d       	adc	r31, r13
     530:	80 81       	ld	r24, Z
     532:	f5 01       	movw	r30, r10
     534:	80 83       	st	Z, r24
					break;
     536:	03 c0       	rjmp	.+6      	; 0x53e <KPD_voidGetValue+0x124>
		for(local_u8ColsCounter = 0;local_u8ColsCounter < 4; local_u8ColsCounter++)
		{
			/* Activate Each Column with low value */
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
			_delay_ms(10);//my
			for(local_u8RowsCounter = 0; local_u8RowsCounter < 4; local_u8RowsCounter++)
     538:	1f 5f       	subi	r17, 0xFF	; 255
     53a:	14 30       	cpi	r17, 0x04	; 4
     53c:	38 f2       	brcs	.-114    	; 0x4cc <KPD_voidGetValue+0xb2>
					break;
				}
			}

			/* Deactivate Current Column with high value */
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_HIGH);
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	68 2d       	mov	r22, r8
     542:	89 2d       	mov	r24, r9
     544:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>

			if(local_u8RowsCounter < 4)
     548:	14 30       	cpi	r17, 0x04	; 4
     54a:	20 f0       	brcs	.+8      	; 0x554 <KPD_voidGetValue+0x13a>
		u8 local_u8KPD_Chars[4][4] = KPD_KEYS; 

		//                     *copy_pu8ReturnedValue = KPD_NOT_PRESSED;                              (my)
		
		
		for(local_u8ColsCounter = 0;local_u8ColsCounter < 4; local_u8ColsCounter++)
     54c:	0f 5f       	subi	r16, 0xFF	; 255
     54e:	04 30       	cpi	r16, 0x04	; 4
     550:	08 f4       	brcc	.+2      	; 0x554 <KPD_voidGetValue+0x13a>
     552:	9f cf       	rjmp	.-194    	; 0x492 <KPD_voidGetValue+0x78>
	}
	else
	{
		// return Error State
	}
}
     554:	a1 96       	adiw	r28, 0x21	; 33
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	7f 90       	pop	r7
     57a:	6f 90       	pop	r6
     57c:	08 95       	ret

0000057e <PRV_voidWriteHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57e:	cf 93       	push	r28
     580:	c8 2f       	mov	r28, r24
     582:	80 fd       	sbrc	r24, 0
     584:	06 c0       	rjmp	.+12     	; 0x592 <PRV_voidWriteHalfPort+0x14>
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	64 e0       	ldi	r22, 0x04	; 4
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     590:	05 c0       	rjmp	.+10     	; 0x59c <PRV_voidWriteHalfPort+0x1e>
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	64 e0       	ldi	r22, 0x04	; 4
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     59c:	c1 fd       	sbrc	r28, 1
     59e:	06 c0       	rjmp	.+12     	; 0x5ac <PRV_voidWriteHalfPort+0x2e>
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	65 e0       	ldi	r22, 0x05	; 5
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <PRV_voidWriteHalfPort+0x38>
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	65 e0       	ldi	r22, 0x05	; 5
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5b6:	c2 fd       	sbrc	r28, 2
     5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <PRV_voidWriteHalfPort+0x48>
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	66 e0       	ldi	r22, 0x06	; 6
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <PRV_voidWriteHalfPort+0x52>
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	66 e0       	ldi	r22, 0x06	; 6
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5d0:	c3 fd       	sbrc	r28, 3
     5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <PRV_voidWriteHalfPort+0x62>
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	67 e0       	ldi	r22, 0x07	; 7
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <PRV_voidWriteHalfPort+0x6c>
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	67 e0       	ldi	r22, 0x07	; 7
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <PRV_voidEnableTriggerWrite>:
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     5f8:	8f e9       	ldi	r24, 0x9F	; 159
     5fa:	9f e0       	ldi	r25, 0x0F	; 15
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <PRV_voidEnableTriggerWrite+0xe>
     600:	00 c0       	rjmp	.+0      	; 0x602 <PRV_voidEnableTriggerWrite+0x14>
     602:	00 00       	nop
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     60e:	08 95       	ret

00000610 <LCD_voidDisplayChar>:
     610:	cf 93       	push	r28
     612:	c8 2f       	mov	r28, r24
     614:	41 e0       	ldi	r20, 0x01	; 1
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	62 e0       	ldi	r22, 0x02	; 2
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     628:	8c 2f       	mov	r24, r28
     62a:	82 95       	swap	r24
     62c:	8f 70       	andi	r24, 0x0F	; 15
     62e:	0e 94 bf 02 	call	0x57e	; 0x57e <PRV_voidWriteHalfPort>
     632:	0e 94 f7 02 	call	0x5ee	; 0x5ee <PRV_voidEnableTriggerWrite>
     636:	8c 2f       	mov	r24, r28
     638:	0e 94 bf 02 	call	0x57e	; 0x57e <PRV_voidWriteHalfPort>
     63c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <PRV_voidEnableTriggerWrite>
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <LCD_voidSendCommand>:
     644:	cf 93       	push	r28
     646:	c8 2f       	mov	r28, r24
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     65c:	8c 2f       	mov	r24, r28
     65e:	82 95       	swap	r24
     660:	8f 70       	andi	r24, 0x0F	; 15
     662:	0e 94 bf 02 	call	0x57e	; 0x57e <PRV_voidWriteHalfPort>
     666:	0e 94 f7 02 	call	0x5ee	; 0x5ee <PRV_voidEnableTriggerWrite>
     66a:	8c 2f       	mov	r24, r28
     66c:	0e 94 bf 02 	call	0x57e	; 0x57e <PRV_voidWriteHalfPort>
     670:	0e 94 f7 02 	call	0x5ee	; 0x5ee <PRV_voidEnableTriggerWrite>
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <LCD_voidInit>:
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	64 e0       	ldi	r22, 0x04	; 4
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	65 e0       	ldi	r22, 0x05	; 5
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     6aa:	41 e0       	ldi	r20, 0x01	; 1
     6ac:	66 e0       	ldi	r22, 0x06	; 6
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     6b4:	41 e0       	ldi	r20, 0x01	; 1
     6b6:	67 e0       	ldi	r22, 0x07	; 7
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
     6be:	2f e7       	ldi	r18, 0x7F	; 127
     6c0:	85 eb       	ldi	r24, 0xB5	; 181
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	90 40       	sbci	r25, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <LCD_voidInit+0x4c>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <LCD_voidInit+0x56>
     6ce:	00 00       	nop
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 bf 02 	call	0x57e	; 0x57e <PRV_voidWriteHalfPort>
     6ea:	0e 94 f7 02 	call	0x5ee	; 0x5ee <PRV_voidEnableTriggerWrite>
     6ee:	88 e2       	ldi	r24, 0x28	; 40
     6f0:	0e 94 22 03 	call	0x644	; 0x644 <LCD_voidSendCommand>
     6f4:	20 ef       	ldi	r18, 0xF0	; 240
     6f6:	2a 95       	dec	r18
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_voidInit+0x7e>
     6fa:	8f e0       	ldi	r24, 0x0F	; 15
     6fc:	0e 94 22 03 	call	0x644	; 0x644 <LCD_voidSendCommand>
     700:	80 ef       	ldi	r24, 0xF0	; 240
     702:	8a 95       	dec	r24
     704:	f1 f7       	brne	.-4      	; 0x702 <LCD_voidInit+0x8a>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 22 03 	call	0x644	; 0x644 <LCD_voidSendCommand>
     70c:	8f e3       	ldi	r24, 0x3F	; 63
     70e:	9f e1       	ldi	r25, 0x1F	; 31
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <LCD_voidInit+0x98>
     714:	00 c0       	rjmp	.+0      	; 0x716 <LCD_voidInit+0x9e>
     716:	00 00       	nop
     718:	86 e0       	ldi	r24, 0x06	; 6
     71a:	0e 94 22 03 	call	0x644	; 0x644 <LCD_voidSendCommand>
     71e:	08 95       	ret

00000720 <LCD_voidDisplayString>:
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	29 f4       	brne	.+10     	; 0x734 <LCD_voidDisplayString+0x14>
     72a:	0c c0       	rjmp	.+24     	; 0x744 <LCD_voidDisplayString+0x24>
     72c:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidDisplayChar>
     730:	cf 5f       	subi	r28, 0xFF	; 255
     732:	02 c0       	rjmp	.+4      	; 0x738 <LCD_voidDisplayString+0x18>
     734:	8c 01       	movw	r16, r24
     736:	c0 e0       	ldi	r28, 0x00	; 0
     738:	f8 01       	movw	r30, r16
     73a:	ec 0f       	add	r30, r28
     73c:	f1 1d       	adc	r31, r1
     73e:	80 81       	ld	r24, Z
     740:	81 11       	cpse	r24, r1
     742:	f4 cf       	rjmp	.-24     	; 0x72c <LCD_voidDisplayString+0xc>
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <LCD_voidClear>:
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 22 03 	call	0x644	; 0x644 <LCD_voidSendCommand>
     752:	8f e3       	ldi	r24, 0x3F	; 63
     754:	9f e1       	ldi	r25, 0x1F	; 31
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <LCD_voidClear+0xa>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <LCD_voidClear+0x10>
     75c:	00 00       	nop
     75e:	08 95       	ret

00000760 <LCD_voidDisplayNumber>:
	}
}


void LCD_voidDisplayNumber(u32 copy_u32Number)
{
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	8b 01       	movw	r16, r22
     76e:	9c 01       	movw	r18, r24
	u32 local_u32ReversedNumber = 1;
	if(copy_u32Number == 0)
     770:	67 2b       	or	r22, r23
     772:	68 2b       	or	r22, r24
     774:	69 2b       	or	r22, r25
     776:	49 f5       	brne	.+82     	; 0x7ca <LCD_voidDisplayNumber+0x6a>
	{
		LCD_voidDisplayChar('0');
     778:	80 e3       	ldi	r24, 0x30	; 48
     77a:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidDisplayChar>
     77e:	45 c0       	rjmp	.+138    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	}
	else
	{
		while(copy_u32Number != 0)
		{
			local_u32ReversedNumber = (local_u32ReversedNumber*10) + (copy_u32Number%10);
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	aa 1f       	adc	r26, r26
     78a:	bb 1f       	adc	r27, r27
     78c:	6c 01       	movw	r12, r24
     78e:	7d 01       	movw	r14, r26
     790:	cc 0c       	add	r12, r12
     792:	dd 1c       	adc	r13, r13
     794:	ee 1c       	adc	r14, r14
     796:	ff 1c       	adc	r15, r15
     798:	cc 0c       	add	r12, r12
     79a:	dd 1c       	adc	r13, r13
     79c:	ee 1c       	adc	r14, r14
     79e:	ff 1c       	adc	r15, r15
     7a0:	c8 0e       	add	r12, r24
     7a2:	d9 1e       	adc	r13, r25
     7a4:	ea 1e       	adc	r14, r26
     7a6:	fb 1e       	adc	r15, r27
     7a8:	c9 01       	movw	r24, r18
     7aa:	b8 01       	movw	r22, r16
     7ac:	2a e0       	ldi	r18, 0x0A	; 10
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodsi4>
     7b8:	6c 0d       	add	r22, r12
     7ba:	7d 1d       	adc	r23, r13
     7bc:	8e 1d       	adc	r24, r14
     7be:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
     7c0:	02 2f       	mov	r16, r18
     7c2:	13 2f       	mov	r17, r19
     7c4:	24 2f       	mov	r18, r20
     7c6:	35 2f       	mov	r19, r21
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <LCD_voidDisplayNumber+0x72>
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
	{
		LCD_voidDisplayChar('0');
	}
	else
	{
		while(copy_u32Number != 0)
     7d2:	01 15       	cp	r16, r1
     7d4:	11 05       	cpc	r17, r1
     7d6:	21 05       	cpc	r18, r1
     7d8:	31 05       	cpc	r19, r1
     7da:	91 f6       	brne	.-92     	; 0x780 <LCD_voidDisplayNumber+0x20>
			copy_u32Number /= 10;
		}

		do
		{
			LCD_voidDisplayChar((local_u32ReversedNumber%10) + '0');
     7dc:	2a e0       	ldi	r18, 0x0A	; 10
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodsi4>
     7e8:	e2 2e       	mov	r14, r18
     7ea:	f3 2e       	mov	r15, r19
     7ec:	04 2f       	mov	r16, r20
     7ee:	15 2f       	mov	r17, r21
     7f0:	80 e3       	ldi	r24, 0x30	; 48
     7f2:	86 0f       	add	r24, r22
     7f4:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidDisplayChar>
			local_u32ReversedNumber /= 10;
     7f8:	6e 2d       	mov	r22, r14
     7fa:	7f 2d       	mov	r23, r15
     7fc:	80 2f       	mov	r24, r16
     7fe:	91 2f       	mov	r25, r17
		} while (local_u32ReversedNumber != 1);
     800:	61 30       	cpi	r22, 0x01	; 1
     802:	71 05       	cpc	r23, r1
     804:	81 05       	cpc	r24, r1
     806:	91 05       	cpc	r25, r1
     808:	49 f7       	brne	.-46     	; 0x7dc <LCD_voidDisplayNumber+0x7c>
	}
}
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	08 95       	ret

00000818 <main>:
#include "DCM_interface.h"
#include "SRVM_interface.h"


int main(void)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <main+0x6>
     81e:	00 d0       	rcall	.+0      	; 0x820 <main+0x8>
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
	u8 x = KPD_NOT_PRESSED;
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	89 83       	std	Y+1, r24	; 0x01
	f32 num2 = 0;
	f32 result = 0;
	u8 op = 0;
	u8 is_num2_flag = 0;

	KPD_voidInit();
     82a:	0e 94 c0 01 	call	0x380	; 0x380 <KPD_voidInit>
	LCD_voidInit();
     82e:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_voidInit>
	LCD_voidDisplayString("####  HELLO ####");
     832:	80 e7       	ldi	r24, 0x70	; 112
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 90 03 	call	0x720	; 0x720 <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	83 ed       	ldi	r24, 0xD3	; 211
     83e:	90 e3       	ldi	r25, 0x30	; 48
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <main+0x28>
     848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x32>
     84a:	00 00       	nop
	_delay_ms(1000);
	LCD_voidClear();
     84c:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_voidClear>
	u8 x = KPD_NOT_PRESSED;
	f32 num1 = 0;
	f32 num2 = 0;
	f32 result = 0;
	u8 op = 0;
	u8 is_num2_flag = 0;
     850:	21 2c       	mov	r2, r1
{
	u8 x = KPD_NOT_PRESSED;
	f32 num1 = 0;
	f32 num2 = 0;
	f32 result = 0;
	u8 op = 0;
     852:	c1 2c       	mov	r12, r1
int main(void)
{
	u8 x = KPD_NOT_PRESSED;
	f32 num1 = 0;
	f32 num2 = 0;
	f32 result = 0;
     854:	a1 2c       	mov	r10, r1
     856:	91 2c       	mov	r9, r1
     858:	81 2c       	mov	r8, r1
     85a:	31 2c       	mov	r3, r1

int main(void)
{
	u8 x = KPD_NOT_PRESSED;
	f32 num1 = 0;
	f32 num2 = 0;
     85c:	41 2c       	mov	r4, r1
     85e:	51 2c       	mov	r5, r1
     860:	32 01       	movw	r6, r4


int main(void)
{
	u8 x = KPD_NOT_PRESSED;
	f32 num1 = 0;
     862:	d1 2c       	mov	r13, r1
     864:	e1 2c       	mov	r14, r1
     866:	f1 2c       	mov	r15, r1
     868:	b1 2c       	mov	r11, r1
	LCD_voidDisplayString("####  HELLO ####");
	_delay_ms(1000);
	LCD_voidClear();
	while (1)
	{
		KPD_voidGetValue(&x);
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	0e 94 0d 02 	call	0x41a	; 0x41a <KPD_voidGetValue>
		
		if (x != KPD_NOT_PRESSED)
     872:	19 81       	ldd	r17, Y+1	; 0x01
     874:	1f 3f       	cpi	r17, 0xFF	; 255
     876:	c9 f3       	breq	.-14     	; 0x86a <__stack+0xb>
		{
			if (x >= '0' && x <= '9')
     878:	00 ed       	ldi	r16, 0xD0	; 208
     87a:	01 0f       	add	r16, r17
     87c:	0a 30       	cpi	r16, 0x0A	; 10
     87e:	08 f0       	brcs	.+2      	; 0x882 <__stack+0x23>
     880:	42 c0       	rjmp	.+132    	; 0x906 <__stack+0xa7>
			{
				u8 one_digit = x - '0';
				LCD_voidDisplayNumber(one_digit);
     882:	60 2f       	mov	r22, r16
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_voidDisplayNumber>
				if (is_num2_flag)
     88e:	22 20       	and	r2, r2
     890:	c9 f0       	breq	.+50     	; 0x8c4 <__stack+0x65>
				{
					num2 = num2 * 10 + one_digit;	
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e2       	ldi	r20, 0x20	; 32
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	c3 01       	movw	r24, r6
     89c:	b2 01       	movw	r22, r4
     89e:	0e 94 f7 07 	call	0xfee	; 0xfee <__mulsf3>
     8a2:	2b 01       	movw	r4, r22
     8a4:	3c 01       	movw	r6, r24
     8a6:	60 2f       	mov	r22, r16
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 6b 07 	call	0xed6	; 0xed6 <__floatsisf>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	c3 01       	movw	r24, r6
     8b8:	b2 01       	movw	r22, r4
     8ba:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__addsf3>
     8be:	2b 01       	movw	r4, r22
     8c0:	3c 01       	movw	r6, r24
     8c2:	a0 c0       	rjmp	.+320    	; 0xa04 <__stack+0x1a5>
				}
				else
				{
					num1 = num1 * 10 + one_digit;
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e2       	ldi	r20, 0x20	; 32
     8ca:	51 e4       	ldi	r21, 0x41	; 65
     8cc:	6d 2d       	mov	r22, r13
     8ce:	7e 2d       	mov	r23, r14
     8d0:	8f 2d       	mov	r24, r15
     8d2:	9b 2d       	mov	r25, r11
     8d4:	0e 94 f7 07 	call	0xfee	; 0xfee <__mulsf3>
     8d8:	6a 83       	std	Y+2, r22	; 0x02
     8da:	7b 83       	std	Y+3, r23	; 0x03
     8dc:	8c 83       	std	Y+4, r24	; 0x04
     8de:	9d 83       	std	Y+5, r25	; 0x05
     8e0:	60 2f       	mov	r22, r16
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 6b 07 	call	0xed6	; 0xed6 <__floatsisf>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	6a 81       	ldd	r22, Y+2	; 0x02
     8f2:	7b 81       	ldd	r23, Y+3	; 0x03
     8f4:	8c 81       	ldd	r24, Y+4	; 0x04
     8f6:	9d 81       	ldd	r25, Y+5	; 0x05
     8f8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__addsf3>
     8fc:	d6 2e       	mov	r13, r22
     8fe:	e7 2e       	mov	r14, r23
     900:	f8 2e       	mov	r15, r24
     902:	b9 2e       	mov	r11, r25
     904:	7f c0       	rjmp	.+254    	; 0xa04 <__stack+0x1a5>
				}
			}
			else if (x == '+' || x == '-' || x == '*' || x == '/')
     906:	1b 32       	cpi	r17, 0x2B	; 43
     908:	31 f0       	breq	.+12     	; 0x916 <__stack+0xb7>
     90a:	1d 32       	cpi	r17, 0x2D	; 45
     90c:	21 f0       	breq	.+8      	; 0x916 <__stack+0xb7>
     90e:	1a 32       	cpi	r17, 0x2A	; 42
     910:	11 f0       	breq	.+4      	; 0x916 <__stack+0xb7>
     912:	1f 32       	cpi	r17, 0x2F	; 47
     914:	39 f4       	brne	.+14     	; 0x924 <__stack+0xc5>
			{
				op = x;
				is_num2_flag = 1; 
				LCD_voidDisplayChar(x);
     916:	81 2f       	mov	r24, r17
     918:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidDisplayChar>
					num1 = num1 * 10 + one_digit;
				}
			}
			else if (x == '+' || x == '-' || x == '*' || x == '/')
			{
				op = x;
     91c:	c1 2e       	mov	r12, r17
				is_num2_flag = 1; 
     91e:	22 24       	eor	r2, r2
     920:	23 94       	inc	r2
				LCD_voidDisplayChar(x);
     922:	70 c0       	rjmp	.+224    	; 0xa04 <__stack+0x1a5>
			}
			else if (x == '=')
     924:	1d 33       	cpi	r17, 0x3D	; 61
     926:	09 f0       	breq	.+2      	; 0x92a <__stack+0xcb>
     928:	5c c0       	rjmp	.+184    	; 0x9e2 <__stack+0x183>
			{
				switch (op)
     92a:	2b e2       	ldi	r18, 0x2B	; 43
     92c:	c2 16       	cp	r12, r18
     92e:	69 f0       	breq	.+26     	; 0x94a <__stack+0xeb>
     930:	2c 15       	cp	r18, r12
     932:	20 f0       	brcs	.+8      	; 0x93c <__stack+0xdd>
     934:	8a e2       	ldi	r24, 0x2A	; 42
     936:	c8 16       	cp	r12, r24
     938:	11 f1       	breq	.+68     	; 0x97e <__stack+0x11f>
     93a:	3b c0       	rjmp	.+118    	; 0x9b2 <__stack+0x153>
     93c:	9d e2       	ldi	r25, 0x2D	; 45
     93e:	c9 16       	cp	r12, r25
     940:	89 f0       	breq	.+34     	; 0x964 <__stack+0x105>
     942:	2f e2       	ldi	r18, 0x2F	; 47
     944:	c2 16       	cp	r12, r18
     946:	41 f1       	breq	.+80     	; 0x998 <__stack+0x139>
     948:	34 c0       	rjmp	.+104    	; 0x9b2 <__stack+0x153>
				{
					case '+': result = num1 + num2; break;
     94a:	a3 01       	movw	r20, r6
     94c:	92 01       	movw	r18, r4
     94e:	6d 2d       	mov	r22, r13
     950:	7e 2d       	mov	r23, r14
     952:	8f 2d       	mov	r24, r15
     954:	9b 2d       	mov	r25, r11
     956:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__addsf3>
     95a:	d6 2e       	mov	r13, r22
     95c:	e7 2e       	mov	r14, r23
     95e:	f8 2e       	mov	r15, r24
     960:	b9 2e       	mov	r11, r25
     962:	2b c0       	rjmp	.+86     	; 0x9ba <__stack+0x15b>
					case '-': result = num1 - num2; break;
     964:	a3 01       	movw	r20, r6
     966:	92 01       	movw	r18, r4
     968:	6d 2d       	mov	r22, r13
     96a:	7e 2d       	mov	r23, r14
     96c:	8f 2d       	mov	r24, r15
     96e:	9b 2d       	mov	r25, r11
     970:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__subsf3>
     974:	d6 2e       	mov	r13, r22
     976:	e7 2e       	mov	r14, r23
     978:	f8 2e       	mov	r15, r24
     97a:	b9 2e       	mov	r11, r25
     97c:	1e c0       	rjmp	.+60     	; 0x9ba <__stack+0x15b>
					case '*': result = num1 * num2; break;
     97e:	a3 01       	movw	r20, r6
     980:	92 01       	movw	r18, r4
     982:	6d 2d       	mov	r22, r13
     984:	7e 2d       	mov	r23, r14
     986:	8f 2d       	mov	r24, r15
     988:	9b 2d       	mov	r25, r11
     98a:	0e 94 f7 07 	call	0xfee	; 0xfee <__mulsf3>
     98e:	d6 2e       	mov	r13, r22
     990:	e7 2e       	mov	r14, r23
     992:	f8 2e       	mov	r15, r24
     994:	b9 2e       	mov	r11, r25
     996:	11 c0       	rjmp	.+34     	; 0x9ba <__stack+0x15b>
					case '/': result = num1 / num2; break;
     998:	a3 01       	movw	r20, r6
     99a:	92 01       	movw	r18, r4
     99c:	6d 2d       	mov	r22, r13
     99e:	7e 2d       	mov	r23, r14
     9a0:	8f 2d       	mov	r24, r15
     9a2:	9b 2d       	mov	r25, r11
     9a4:	0e 94 c8 06 	call	0xd90	; 0xd90 <__divsf3>
     9a8:	d6 2e       	mov	r13, r22
     9aa:	e7 2e       	mov	r14, r23
     9ac:	f8 2e       	mov	r15, r24
     9ae:	b9 2e       	mov	r11, r25
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__stack+0x15b>
				is_num2_flag = 1; 
				LCD_voidDisplayChar(x);
			}
			else if (x == '=')
			{
				switch (op)
     9b2:	da 2c       	mov	r13, r10
     9b4:	e9 2c       	mov	r14, r9
     9b6:	f8 2c       	mov	r15, r8
     9b8:	b3 2c       	mov	r11, r3
					case '-': result = num1 - num2; break;
					case '*': result = num1 * num2; break;
					case '/': result = num1 / num2; break;
				}

				LCD_voidDisplayChar('=');
     9ba:	8d e3       	ldi	r24, 0x3D	; 61
     9bc:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidDisplayChar>
				LCD_voidDisplayNumber((u32)result); 
     9c0:	6d 2d       	mov	r22, r13
     9c2:	7e 2d       	mov	r23, r14
     9c4:	8f 2d       	mov	r24, r15
     9c6:	9b 2d       	mov	r25, r11
     9c8:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>
     9cc:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_voidDisplayNumber>
     9d0:	ad 2c       	mov	r10, r13
     9d2:	9e 2c       	mov	r9, r14
     9d4:	8f 2c       	mov	r8, r15
     9d6:	3b 2c       	mov	r3, r11
				num1 = result; 
				num2 = 0; 
				is_num2_flag = 0;
     9d8:	21 2c       	mov	r2, r1
				}

				LCD_voidDisplayChar('=');
				LCD_voidDisplayNumber((u32)result); 
				num1 = result; 
				num2 = 0; 
     9da:	41 2c       	mov	r4, r1
     9dc:	51 2c       	mov	r5, r1
     9de:	32 01       	movw	r6, r4
     9e0:	11 c0       	rjmp	.+34     	; 0xa04 <__stack+0x1a5>
				is_num2_flag = 0;
			}
			else if (x == '#')
     9e2:	13 32       	cpi	r17, 0x23	; 35
     9e4:	79 f4       	brne	.+30     	; 0xa04 <__stack+0x1a5>
			{
				LCD_voidClear();
     9e6:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_voidClear>
				is_num2_flag = 0;
     9ea:	21 2c       	mov	r2, r1
				op = 0;
     9ec:	c1 2c       	mov	r12, r1
				num1 = 0;
				num2 = 0;
				result = 0;
     9ee:	a1 2c       	mov	r10, r1
     9f0:	91 2c       	mov	r9, r1
     9f2:	81 2c       	mov	r8, r1
     9f4:	31 2c       	mov	r3, r1
			{
				LCD_voidClear();
				is_num2_flag = 0;
				op = 0;
				num1 = 0;
				num2 = 0;
     9f6:	41 2c       	mov	r4, r1
     9f8:	51 2c       	mov	r5, r1
     9fa:	32 01       	movw	r6, r4
			else if (x == '#')
			{
				LCD_voidClear();
				is_num2_flag = 0;
				op = 0;
				num1 = 0;
     9fc:	d1 2c       	mov	r13, r1
     9fe:	e1 2c       	mov	r14, r1
     a00:	f1 2c       	mov	r15, r1
     a02:	b1 2c       	mov	r11, r1
				num2 = 0;
				result = 0;
			}
			x = KPD_NOT_PRESSED;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	30 cf       	rjmp	.-416    	; 0x86a <__stack+0xb>

00000a0a <__vector_11>:
	}
}


ISR(TIMER0_OVF)
{
     a0a:	1f 92       	push	r1
     a0c:	0f 92       	push	r0
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	2f 93       	push	r18
     a16:	3f 93       	push	r19
     a18:	4f 93       	push	r20
     a1a:	5f 93       	push	r21
     a1c:	6f 93       	push	r22
     a1e:	7f 93       	push	r23
     a20:	8f 93       	push	r24
     a22:	9f 93       	push	r25
     a24:	af 93       	push	r26
     a26:	bf 93       	push	r27
     a28:	ef 93       	push	r30
     a2a:	ff 93       	push	r31
	static u16 local_u16OVFCounter=0;
	local_u16OVFCounter++;
     a2c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <local_u16OVFCounter.1615>
     a30:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <local_u16OVFCounter.1615+0x1>
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <local_u16OVFCounter.1615+0x1>
     a3a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <local_u16OVFCounter.1615>
	
	if(TMR0_OVER_FLOW_COUNTER == local_u16OVFCounter)
     a3e:	81 3d       	cpi	r24, 0xD1	; 209
     a40:	93 40       	sbci	r25, 0x03	; 3
     a42:	69 f4       	brne	.+26     	; 0xa5e <__vector_11+0x54>
	{
		// Init Timer With Preload Value
	    TCNT0_REG = TMR0_PRELOAD_VALUE;
     a44:	81 e7       	ldi	r24, 0x71	; 113
     a46:	82 bf       	out	0x32, r24	; 50
		
		// Clear Counter
		local_u16OVFCounter=0;
     a48:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <local_u16OVFCounter.1615+0x1>
     a4c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <local_u16OVFCounter.1615>
		
		// Call Action
		if(PRV_pFunCallBackOVF!=NULL)
     a50:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <PRV_pFunCallBackOVF>
     a54:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <PRV_pFunCallBackOVF+0x1>
     a58:	30 97       	sbiw	r30, 0x00	; 0
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__vector_11+0x54>
		{
			PRV_pFunCallBackOVF();
     a5c:	09 95       	icall
		}
	}
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_10>:


ISR(TIMER0_COMP)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	static u16 local_u16CTCCounter=0;
	local_u16CTCCounter++;
     aa2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
     aa6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__data_end+0x1>
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0x1>
     ab0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
	
	if(TMR0_CTC_COUNTER == local_u16CTCCounter)
     ab4:	88 3e       	cpi	r24, 0xE8	; 232
     ab6:	93 40       	sbci	r25, 0x03	; 3
     ab8:	59 f4       	brne	.+22     	; 0xad0 <__vector_10+0x50>
	{
		// Clear Counter
		local_u16CTCCounter=0;
     aba:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__data_end+0x1>
     abe:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
		
		// Call Action
		if(PRV_pFunCallBackCTC!=NULL)
     ac2:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <PRV_pFunCallBackCTC>
     ac6:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <PRV_pFunCallBackCTC+0x1>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	09 f0       	breq	.+2      	; 0xad0 <__vector_10+0x50>
		{
			PRV_pFunCallBackCTC();
     ace:	09 95       	icall
		}
	}
}
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_9>:
	}
}


ISR(TIMER1_OVF)
{
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
	static u8 local_u8OVFCounter=0;
	local_u8OVFCounter++;
     b14:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <local_u8OVFCounter.1615>
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <local_u8OVFCounter.1615>
	
	if(TMR1_OVER_FLOW_COUNTER == local_u8OVFCounter)
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	69 f4       	brne	.+26     	; 0xb3c <__vector_9+0x4a>
	{
		// Init Timer With Preload Value
	    TCNT1_u16_REG = TMR1_PRELOAD_VALUE;
     b22:	80 e7       	ldi	r24, 0x70	; 112
     b24:	9f e2       	ldi	r25, 0x2F	; 47
     b26:	9d bd       	out	0x2d, r25	; 45
     b28:	8c bd       	out	0x2c, r24	; 44
		
		// Clear Counter
	    local_u8OVFCounter=0;
     b2a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <local_u8OVFCounter.1615>
		
		// Call Action
		if(PRV_pFunCallBackOVF!=NULL)
     b2e:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <PRV_pFunCallBackOVF>
     b32:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <PRV_pFunCallBackOVF+0x1>
     b36:	30 97       	sbiw	r30, 0x00	; 0
     b38:	09 f0       	breq	.+2      	; 0xb3c <__vector_9+0x4a>
		{
			PRV_pFunCallBackOVF();
     b3a:	09 95       	icall
		}
	}
}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_7>:


ISR(TIMER1_COMPA)
{
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
	static u16 local_u16CTCCounter=0;
	local_u16CTCCounter++;
     b80:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <local_u16CTCCounter.1621>
     b84:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <local_u16CTCCounter.1621+0x1>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <local_u16CTCCounter.1621+0x1>
     b8e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <local_u16CTCCounter.1621>
	
	if(TMR1_CTC_COUNTER_A == local_u16CTCCounter)
     b92:	04 97       	sbiw	r24, 0x04	; 4
     b94:	59 f4       	brne	.+22     	; 0xbac <__vector_7+0x4e>
	{
		// Clear Counter
		local_u16CTCCounter=0;
     b96:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <local_u16CTCCounter.1621+0x1>
     b9a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <local_u16CTCCounter.1621>
		
		// Call Action
		if(PRV_pFunCallBackCTCA!=NULL)
     b9e:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <PRV_pFunCallBackCTCA>
     ba2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <PRV_pFunCallBackCTCA+0x1>
     ba6:	30 97       	sbiw	r30, 0x00	; 0
     ba8:	09 f0       	breq	.+2      	; 0xbac <__vector_7+0x4e>
		{
			PRV_pFunCallBackCTCA();
     baa:	09 95       	icall
		}
	}
}
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <__vector_5>:
	}
}


ISR(TIMER2_OVF)
{
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
	static u16 local_u16OVFCounter=0;
	local_u16OVFCounter++;
     bf0:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <local_u16OVFCounter.1615>
     bf4:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <local_u16OVFCounter.1615+0x1>
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <local_u16OVFCounter.1615+0x1>
     bfe:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <local_u16OVFCounter.1615>
	
	if(TMR2_OVER_FLOW_COUNTER == local_u16OVFCounter)
     c02:	81 3d       	cpi	r24, 0xD1	; 209
     c04:	93 40       	sbci	r25, 0x03	; 3
     c06:	69 f4       	brne	.+26     	; 0xc22 <__vector_5+0x54>
	{
		// Init Timer With Preload Value
		TCNT2_REG = TMR2_PRELOAD_VALUE;
     c08:	81 e7       	ldi	r24, 0x71	; 113
     c0a:	84 bd       	out	0x24, r24	; 36
		
		// Clear Counter
		local_u16OVFCounter=0;
     c0c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <local_u16OVFCounter.1615+0x1>
     c10:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <local_u16OVFCounter.1615>
		
		// Call Action
		if(PRV_pFunCallBackOVF!=NULL)
     c14:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <PRV_pFunCallBackOVF>
     c18:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <PRV_pFunCallBackOVF+0x1>
     c1c:	30 97       	sbiw	r30, 0x00	; 0
     c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_5+0x54>
		{
			PRV_pFunCallBackOVF();
     c20:	09 95       	icall
		}
	}
}
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_4>:


ISR(TIMER2_COMP)
{
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
	static u16 local_u16CTCCounter=0;
	local_u16CTCCounter++;
     c66:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <local_u16CTCCounter.1621>
     c6a:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <local_u16CTCCounter.1621+0x1>
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <local_u16CTCCounter.1621+0x1>
     c74:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <local_u16CTCCounter.1621>
	
	if(TMR2_CTC_COUNTER == local_u16CTCCounter)
     c78:	88 3e       	cpi	r24, 0xE8	; 232
     c7a:	93 40       	sbci	r25, 0x03	; 3
     c7c:	59 f4       	brne	.+22     	; 0xc94 <__vector_4+0x50>
	{
		// Clear Counter
		local_u16CTCCounter=0;
     c7e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <local_u16CTCCounter.1621+0x1>
     c82:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <local_u16CTCCounter.1621>
		
		// Call Action
		if(PRV_pFunCallBackCTC!=NULL)
     c86:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <PRV_pFunCallBackCTC>
     c8a:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <PRV_pFunCallBackCTC+0x1>
     c8e:	30 97       	sbiw	r30, 0x00	; 0
     c90:	09 f0       	breq	.+2      	; 0xc94 <__vector_4+0x50>
		{
			PRV_pFunCallBackCTC();
     c92:	09 95       	icall
		}
	}
}
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__subsf3>:
     cb6:	50 58       	subi	r21, 0x80	; 128

00000cb8 <__addsf3>:
     cb8:	bb 27       	eor	r27, r27
     cba:	aa 27       	eor	r26, r26
     cbc:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3x>
     cc0:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
     cc4:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
     cc8:	38 f0       	brcs	.+14     	; 0xcd8 <__addsf3+0x20>
     cca:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
     cce:	20 f0       	brcs	.+8      	; 0xcd8 <__addsf3+0x20>
     cd0:	39 f4       	brne	.+14     	; 0xce0 <__addsf3+0x28>
     cd2:	9f 3f       	cpi	r25, 0xFF	; 255
     cd4:	19 f4       	brne	.+6      	; 0xcdc <__addsf3+0x24>
     cd6:	26 f4       	brtc	.+8      	; 0xce0 <__addsf3+0x28>
     cd8:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
     cdc:	0e f4       	brtc	.+2      	; 0xce0 <__addsf3+0x28>
     cde:	e0 95       	com	r30
     ce0:	e7 fb       	bst	r30, 7
     ce2:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>

00000ce6 <__addsf3x>:
     ce6:	e9 2f       	mov	r30, r25
     ce8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
     cec:	58 f3       	brcs	.-42     	; 0xcc4 <__addsf3+0xc>
     cee:	ba 17       	cp	r27, r26
     cf0:	62 07       	cpc	r22, r18
     cf2:	73 07       	cpc	r23, r19
     cf4:	84 07       	cpc	r24, r20
     cf6:	95 07       	cpc	r25, r21
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <__addsf3x+0x1c>
     cfa:	79 f4       	brne	.+30     	; 0xd1a <__addsf3x+0x34>
     cfc:	a6 f5       	brtc	.+104    	; 0xd66 <__addsf3x+0x80>
     cfe:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_zero>
     d02:	0e f4       	brtc	.+2      	; 0xd06 <__addsf3x+0x20>
     d04:	e0 95       	com	r30
     d06:	0b 2e       	mov	r0, r27
     d08:	ba 2f       	mov	r27, r26
     d0a:	a0 2d       	mov	r26, r0
     d0c:	0b 01       	movw	r0, r22
     d0e:	b9 01       	movw	r22, r18
     d10:	90 01       	movw	r18, r0
     d12:	0c 01       	movw	r0, r24
     d14:	ca 01       	movw	r24, r20
     d16:	a0 01       	movw	r20, r0
     d18:	11 24       	eor	r1, r1
     d1a:	ff 27       	eor	r31, r31
     d1c:	59 1b       	sub	r21, r25
     d1e:	99 f0       	breq	.+38     	; 0xd46 <__addsf3x+0x60>
     d20:	59 3f       	cpi	r21, 0xF9	; 249
     d22:	50 f4       	brcc	.+20     	; 0xd38 <__addsf3x+0x52>
     d24:	50 3e       	cpi	r21, 0xE0	; 224
     d26:	68 f1       	brcs	.+90     	; 0xd82 <__addsf3x+0x9c>
     d28:	1a 16       	cp	r1, r26
     d2a:	f0 40       	sbci	r31, 0x00	; 0
     d2c:	a2 2f       	mov	r26, r18
     d2e:	23 2f       	mov	r18, r19
     d30:	34 2f       	mov	r19, r20
     d32:	44 27       	eor	r20, r20
     d34:	58 5f       	subi	r21, 0xF8	; 248
     d36:	f3 cf       	rjmp	.-26     	; 0xd1e <__addsf3x+0x38>
     d38:	46 95       	lsr	r20
     d3a:	37 95       	ror	r19
     d3c:	27 95       	ror	r18
     d3e:	a7 95       	ror	r26
     d40:	f0 40       	sbci	r31, 0x00	; 0
     d42:	53 95       	inc	r21
     d44:	c9 f7       	brne	.-14     	; 0xd38 <__addsf3x+0x52>
     d46:	7e f4       	brtc	.+30     	; 0xd66 <__addsf3x+0x80>
     d48:	1f 16       	cp	r1, r31
     d4a:	ba 0b       	sbc	r27, r26
     d4c:	62 0b       	sbc	r22, r18
     d4e:	73 0b       	sbc	r23, r19
     d50:	84 0b       	sbc	r24, r20
     d52:	ba f0       	brmi	.+46     	; 0xd82 <__addsf3x+0x9c>
     d54:	91 50       	subi	r25, 0x01	; 1
     d56:	a1 f0       	breq	.+40     	; 0xd80 <__addsf3x+0x9a>
     d58:	ff 0f       	add	r31, r31
     d5a:	bb 1f       	adc	r27, r27
     d5c:	66 1f       	adc	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	c2 f7       	brpl	.-16     	; 0xd54 <__addsf3x+0x6e>
     d64:	0e c0       	rjmp	.+28     	; 0xd82 <__addsf3x+0x9c>
     d66:	ba 0f       	add	r27, r26
     d68:	62 1f       	adc	r22, r18
     d6a:	73 1f       	adc	r23, r19
     d6c:	84 1f       	adc	r24, r20
     d6e:	48 f4       	brcc	.+18     	; 0xd82 <__addsf3x+0x9c>
     d70:	87 95       	ror	r24
     d72:	77 95       	ror	r23
     d74:	67 95       	ror	r22
     d76:	b7 95       	ror	r27
     d78:	f7 95       	ror	r31
     d7a:	9e 3f       	cpi	r25, 0xFE	; 254
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <__addsf3x+0x9a>
     d7e:	b0 cf       	rjmp	.-160    	; 0xce0 <__addsf3+0x28>
     d80:	93 95       	inc	r25
     d82:	88 0f       	add	r24, r24
     d84:	08 f0       	brcs	.+2      	; 0xd88 <__addsf3x+0xa2>
     d86:	99 27       	eor	r25, r25
     d88:	ee 0f       	add	r30, r30
     d8a:	97 95       	ror	r25
     d8c:	87 95       	ror	r24
     d8e:	08 95       	ret

00000d90 <__divsf3>:
     d90:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3x>
     d94:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
     d98:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
     d9c:	58 f0       	brcs	.+22     	; 0xdb4 <__divsf3+0x24>
     d9e:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
     da2:	40 f0       	brcs	.+16     	; 0xdb4 <__divsf3+0x24>
     da4:	29 f4       	brne	.+10     	; 0xdb0 <__divsf3+0x20>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	29 f0       	breq	.+10     	; 0xdb4 <__divsf3+0x24>
     daa:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     dae:	51 11       	cpse	r21, r1
     db0:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
     db4:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>

00000db8 <__divsf3x>:
     db8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
     dbc:	68 f3       	brcs	.-38     	; 0xd98 <__divsf3+0x8>

00000dbe <__divsf3_pse>:
     dbe:	99 23       	and	r25, r25
     dc0:	b1 f3       	breq	.-20     	; 0xdae <__divsf3+0x1e>
     dc2:	55 23       	and	r21, r21
     dc4:	91 f3       	breq	.-28     	; 0xdaa <__divsf3+0x1a>
     dc6:	95 1b       	sub	r25, r21
     dc8:	55 0b       	sbc	r21, r21
     dca:	bb 27       	eor	r27, r27
     dcc:	aa 27       	eor	r26, r26
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	38 f0       	brcs	.+14     	; 0xde4 <__divsf3_pse+0x26>
     dd6:	9f 5f       	subi	r25, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	aa 1f       	adc	r26, r26
     de2:	a9 f3       	breq	.-22     	; 0xdce <__divsf3_pse+0x10>
     de4:	35 d0       	rcall	.+106    	; 0xe50 <__divsf3_pse+0x92>
     de6:	0e 2e       	mov	r0, r30
     de8:	3a f0       	brmi	.+14     	; 0xdf8 <__divsf3_pse+0x3a>
     dea:	e0 e8       	ldi	r30, 0x80	; 128
     dec:	32 d0       	rcall	.+100    	; 0xe52 <__divsf3_pse+0x94>
     dee:	91 50       	subi	r25, 0x01	; 1
     df0:	50 40       	sbci	r21, 0x00	; 0
     df2:	e6 95       	lsr	r30
     df4:	00 1c       	adc	r0, r0
     df6:	ca f7       	brpl	.-14     	; 0xdea <__divsf3_pse+0x2c>
     df8:	2b d0       	rcall	.+86     	; 0xe50 <__divsf3_pse+0x92>
     dfa:	fe 2f       	mov	r31, r30
     dfc:	29 d0       	rcall	.+82     	; 0xe50 <__divsf3_pse+0x92>
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	bb 1f       	adc	r27, r27
     e06:	26 17       	cp	r18, r22
     e08:	37 07       	cpc	r19, r23
     e0a:	48 07       	cpc	r20, r24
     e0c:	ab 07       	cpc	r26, r27
     e0e:	b0 e8       	ldi	r27, 0x80	; 128
     e10:	09 f0       	breq	.+2      	; 0xe14 <__divsf3_pse+0x56>
     e12:	bb 0b       	sbc	r27, r27
     e14:	80 2d       	mov	r24, r0
     e16:	bf 01       	movw	r22, r30
     e18:	ff 27       	eor	r31, r31
     e1a:	93 58       	subi	r25, 0x83	; 131
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	3a f0       	brmi	.+14     	; 0xe2e <__divsf3_pse+0x70>
     e20:	9e 3f       	cpi	r25, 0xFE	; 254
     e22:	51 05       	cpc	r21, r1
     e24:	78 f0       	brcs	.+30     	; 0xe44 <__divsf3_pse+0x86>
     e26:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     e2a:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
     e2e:	5f 3f       	cpi	r21, 0xFF	; 255
     e30:	e4 f3       	brlt	.-8      	; 0xe2a <__divsf3_pse+0x6c>
     e32:	98 3e       	cpi	r25, 0xE8	; 232
     e34:	d4 f3       	brlt	.-12     	; 0xe2a <__divsf3_pse+0x6c>
     e36:	86 95       	lsr	r24
     e38:	77 95       	ror	r23
     e3a:	67 95       	ror	r22
     e3c:	b7 95       	ror	r27
     e3e:	f7 95       	ror	r31
     e40:	9f 5f       	subi	r25, 0xFF	; 255
     e42:	c9 f7       	brne	.-14     	; 0xe36 <__divsf3_pse+0x78>
     e44:	88 0f       	add	r24, r24
     e46:	91 1d       	adc	r25, r1
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	97 f9       	bld	r25, 7
     e4e:	08 95       	ret
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	66 0f       	add	r22, r22
     e54:	77 1f       	adc	r23, r23
     e56:	88 1f       	adc	r24, r24
     e58:	bb 1f       	adc	r27, r27
     e5a:	62 17       	cp	r22, r18
     e5c:	73 07       	cpc	r23, r19
     e5e:	84 07       	cpc	r24, r20
     e60:	ba 07       	cpc	r27, r26
     e62:	20 f0       	brcs	.+8      	; 0xe6c <__divsf3_pse+0xae>
     e64:	62 1b       	sub	r22, r18
     e66:	73 0b       	sbc	r23, r19
     e68:	84 0b       	sbc	r24, r20
     e6a:	ba 0b       	sbc	r27, r26
     e6c:	ee 1f       	adc	r30, r30
     e6e:	88 f7       	brcc	.-30     	; 0xe52 <__divsf3_pse+0x94>
     e70:	e0 95       	com	r30
     e72:	08 95       	ret

00000e74 <__fixunssfsi>:
     e74:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_splitA>
     e78:	88 f0       	brcs	.+34     	; 0xe9c <__fixunssfsi+0x28>
     e7a:	9f 57       	subi	r25, 0x7F	; 127
     e7c:	98 f0       	brcs	.+38     	; 0xea4 <__fixunssfsi+0x30>
     e7e:	b9 2f       	mov	r27, r25
     e80:	99 27       	eor	r25, r25
     e82:	b7 51       	subi	r27, 0x17	; 23
     e84:	b0 f0       	brcs	.+44     	; 0xeb2 <__fixunssfsi+0x3e>
     e86:	e1 f0       	breq	.+56     	; 0xec0 <__fixunssfsi+0x4c>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	1a f0       	brmi	.+6      	; 0xe98 <__fixunssfsi+0x24>
     e92:	ba 95       	dec	r27
     e94:	c9 f7       	brne	.-14     	; 0xe88 <__fixunssfsi+0x14>
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <__fixunssfsi+0x4c>
     e98:	b1 30       	cpi	r27, 0x01	; 1
     e9a:	91 f0       	breq	.+36     	; 0xec0 <__fixunssfsi+0x4c>
     e9c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_zero>
     ea0:	b1 e0       	ldi	r27, 0x01	; 1
     ea2:	08 95       	ret
     ea4:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_zero>
     ea8:	67 2f       	mov	r22, r23
     eaa:	78 2f       	mov	r23, r24
     eac:	88 27       	eor	r24, r24
     eae:	b8 5f       	subi	r27, 0xF8	; 248
     eb0:	39 f0       	breq	.+14     	; 0xec0 <__fixunssfsi+0x4c>
     eb2:	b9 3f       	cpi	r27, 0xF9	; 249
     eb4:	cc f3       	brlt	.-14     	; 0xea8 <__fixunssfsi+0x34>
     eb6:	86 95       	lsr	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b3 95       	inc	r27
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <__fixunssfsi+0x42>
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <__fixunssfsi+0x5c>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	08 95       	ret

00000ed2 <__floatunsisf>:
     ed2:	e8 94       	clt
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <__floatsisf+0x12>

00000ed6 <__floatsisf>:
     ed6:	97 fb       	bst	r25, 7
     ed8:	3e f4       	brtc	.+14     	; 0xee8 <__floatsisf+0x12>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	99 23       	and	r25, r25
     eea:	a9 f0       	breq	.+42     	; 0xf16 <__floatsisf+0x40>
     eec:	f9 2f       	mov	r31, r25
     eee:	96 e9       	ldi	r25, 0x96	; 150
     ef0:	bb 27       	eor	r27, r27
     ef2:	93 95       	inc	r25
     ef4:	f6 95       	lsr	r31
     ef6:	87 95       	ror	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f1 11       	cpse	r31, r1
     f00:	f8 cf       	rjmp	.-16     	; 0xef2 <__floatsisf+0x1c>
     f02:	fa f4       	brpl	.+62     	; 0xf42 <__floatsisf+0x6c>
     f04:	bb 0f       	add	r27, r27
     f06:	11 f4       	brne	.+4      	; 0xf0c <__floatsisf+0x36>
     f08:	60 ff       	sbrs	r22, 0
     f0a:	1b c0       	rjmp	.+54     	; 0xf42 <__floatsisf+0x6c>
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <__floatsisf+0x6c>
     f16:	88 23       	and	r24, r24
     f18:	11 f0       	breq	.+4      	; 0xf1e <__floatsisf+0x48>
     f1a:	96 e9       	ldi	r25, 0x96	; 150
     f1c:	11 c0       	rjmp	.+34     	; 0xf40 <__floatsisf+0x6a>
     f1e:	77 23       	and	r23, r23
     f20:	21 f0       	breq	.+8      	; 0xf2a <__floatsisf+0x54>
     f22:	9e e8       	ldi	r25, 0x8E	; 142
     f24:	87 2f       	mov	r24, r23
     f26:	76 2f       	mov	r23, r22
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <__floatsisf+0x5e>
     f2a:	66 23       	and	r22, r22
     f2c:	71 f0       	breq	.+28     	; 0xf4a <__floatsisf+0x74>
     f2e:	96 e8       	ldi	r25, 0x86	; 134
     f30:	86 2f       	mov	r24, r22
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	2a f0       	brmi	.+10     	; 0xf42 <__floatsisf+0x6c>
     f38:	9a 95       	dec	r25
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	da f7       	brpl	.-10     	; 0xf38 <__floatsisf+0x62>
     f42:	88 0f       	add	r24, r24
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__fp_inf>:
     f4c:	97 f9       	bld	r25, 7
     f4e:	9f 67       	ori	r25, 0x7F	; 127
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__fp_nan>:
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	08 95       	ret

00000f5e <__fp_pscA>:
     f5e:	00 24       	eor	r0, r0
     f60:	0a 94       	dec	r0
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	09 06       	cpc	r0, r25
     f6a:	08 95       	ret

00000f6c <__fp_pscB>:
     f6c:	00 24       	eor	r0, r0
     f6e:	0a 94       	dec	r0
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	14 06       	cpc	r1, r20
     f76:	05 06       	cpc	r0, r21
     f78:	08 95       	ret

00000f7a <__fp_round>:
     f7a:	09 2e       	mov	r0, r25
     f7c:	03 94       	inc	r0
     f7e:	00 0c       	add	r0, r0
     f80:	11 f4       	brne	.+4      	; 0xf86 <__fp_round+0xc>
     f82:	88 23       	and	r24, r24
     f84:	52 f0       	brmi	.+20     	; 0xf9a <__fp_round+0x20>
     f86:	bb 0f       	add	r27, r27
     f88:	40 f4       	brcc	.+16     	; 0xf9a <__fp_round+0x20>
     f8a:	bf 2b       	or	r27, r31
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__fp_round+0x18>
     f8e:	60 ff       	sbrs	r22, 0
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <__fp_round+0x20>
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__fp_split3>:
     f9c:	57 fd       	sbrc	r21, 7
     f9e:	90 58       	subi	r25, 0x80	; 128
     fa0:	44 0f       	add	r20, r20
     fa2:	55 1f       	adc	r21, r21
     fa4:	59 f0       	breq	.+22     	; 0xfbc <__fp_splitA+0x10>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <__fp_splitA+0x1a>
     faa:	47 95       	ror	r20

00000fac <__fp_splitA>:
     fac:	88 0f       	add	r24, r24
     fae:	97 fb       	bst	r25, 7
     fb0:	99 1f       	adc	r25, r25
     fb2:	61 f0       	breq	.+24     	; 0xfcc <__fp_splitA+0x20>
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	79 f0       	breq	.+30     	; 0xfd6 <__fp_splitA+0x2a>
     fb8:	87 95       	ror	r24
     fba:	08 95       	ret
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	14 06       	cpc	r1, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	f2 cf       	rjmp	.-28     	; 0xfaa <__fp_split3+0xe>
     fc6:	46 95       	lsr	r20
     fc8:	f1 df       	rcall	.-30     	; 0xfac <__fp_splitA>
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <__fp_splitA+0x30>
     fcc:	16 16       	cp	r1, r22
     fce:	17 06       	cpc	r1, r23
     fd0:	18 06       	cpc	r1, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	f1 cf       	rjmp	.-30     	; 0xfb8 <__fp_splitA+0xc>
     fd6:	86 95       	lsr	r24
     fd8:	71 05       	cpc	r23, r1
     fda:	61 05       	cpc	r22, r1
     fdc:	08 94       	sec
     fde:	08 95       	ret

00000fe0 <__fp_zero>:
     fe0:	e8 94       	clt

00000fe2 <__fp_szero>:
     fe2:	bb 27       	eor	r27, r27
     fe4:	66 27       	eor	r22, r22
     fe6:	77 27       	eor	r23, r23
     fe8:	cb 01       	movw	r24, r22
     fea:	97 f9       	bld	r25, 7
     fec:	08 95       	ret

00000fee <__mulsf3>:
     fee:	0e 94 0a 08 	call	0x1014	; 0x1014 <__mulsf3x>
     ff2:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
     ff6:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
     ffa:	38 f0       	brcs	.+14     	; 0x100a <__mulsf3+0x1c>
     ffc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
    1000:	20 f0       	brcs	.+8      	; 0x100a <__mulsf3+0x1c>
    1002:	95 23       	and	r25, r21
    1004:	11 f0       	breq	.+4      	; 0x100a <__mulsf3+0x1c>
    1006:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
    100a:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
    100e:	11 24       	eor	r1, r1
    1010:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>

00001014 <__mulsf3x>:
    1014:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
    1018:	70 f3       	brcs	.-36     	; 0xff6 <__mulsf3+0x8>

0000101a <__mulsf3_pse>:
    101a:	95 9f       	mul	r25, r21
    101c:	c1 f3       	breq	.-16     	; 0x100e <__mulsf3+0x20>
    101e:	95 0f       	add	r25, r21
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	55 1f       	adc	r21, r21
    1024:	62 9f       	mul	r22, r18
    1026:	f0 01       	movw	r30, r0
    1028:	72 9f       	mul	r23, r18
    102a:	bb 27       	eor	r27, r27
    102c:	f0 0d       	add	r31, r0
    102e:	b1 1d       	adc	r27, r1
    1030:	63 9f       	mul	r22, r19
    1032:	aa 27       	eor	r26, r26
    1034:	f0 0d       	add	r31, r0
    1036:	b1 1d       	adc	r27, r1
    1038:	aa 1f       	adc	r26, r26
    103a:	64 9f       	mul	r22, r20
    103c:	66 27       	eor	r22, r22
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	66 1f       	adc	r22, r22
    1044:	82 9f       	mul	r24, r18
    1046:	22 27       	eor	r18, r18
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	62 1f       	adc	r22, r18
    104e:	73 9f       	mul	r23, r19
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	62 1f       	adc	r22, r18
    1056:	83 9f       	mul	r24, r19
    1058:	a0 0d       	add	r26, r0
    105a:	61 1d       	adc	r22, r1
    105c:	22 1f       	adc	r18, r18
    105e:	74 9f       	mul	r23, r20
    1060:	33 27       	eor	r19, r19
    1062:	a0 0d       	add	r26, r0
    1064:	61 1d       	adc	r22, r1
    1066:	23 1f       	adc	r18, r19
    1068:	84 9f       	mul	r24, r20
    106a:	60 0d       	add	r22, r0
    106c:	21 1d       	adc	r18, r1
    106e:	82 2f       	mov	r24, r18
    1070:	76 2f       	mov	r23, r22
    1072:	6a 2f       	mov	r22, r26
    1074:	11 24       	eor	r1, r1
    1076:	9f 57       	subi	r25, 0x7F	; 127
    1078:	50 40       	sbci	r21, 0x00	; 0
    107a:	9a f0       	brmi	.+38     	; 0x10a2 <__mulsf3_pse+0x88>
    107c:	f1 f0       	breq	.+60     	; 0x10ba <__mulsf3_pse+0xa0>
    107e:	88 23       	and	r24, r24
    1080:	4a f0       	brmi	.+18     	; 0x1094 <__mulsf3_pse+0x7a>
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	bb 1f       	adc	r27, r27
    1088:	66 1f       	adc	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	a9 f7       	brne	.-22     	; 0x107e <__mulsf3_pse+0x64>
    1094:	9e 3f       	cpi	r25, 0xFE	; 254
    1096:	51 05       	cpc	r21, r1
    1098:	80 f0       	brcs	.+32     	; 0x10ba <__mulsf3_pse+0xa0>
    109a:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
    109e:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
    10a2:	5f 3f       	cpi	r21, 0xFF	; 255
    10a4:	e4 f3       	brlt	.-8      	; 0x109e <__mulsf3_pse+0x84>
    10a6:	98 3e       	cpi	r25, 0xE8	; 232
    10a8:	d4 f3       	brlt	.-12     	; 0x109e <__mulsf3_pse+0x84>
    10aa:	86 95       	lsr	r24
    10ac:	77 95       	ror	r23
    10ae:	67 95       	ror	r22
    10b0:	b7 95       	ror	r27
    10b2:	f7 95       	ror	r31
    10b4:	e7 95       	ror	r30
    10b6:	9f 5f       	subi	r25, 0xFF	; 255
    10b8:	c1 f7       	brne	.-16     	; 0x10aa <__mulsf3_pse+0x90>
    10ba:	fe 2b       	or	r31, r30
    10bc:	88 0f       	add	r24, r24
    10be:	91 1d       	adc	r25, r1
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__udivmodsi4>:
    10c8:	a1 e2       	ldi	r26, 0x21	; 33
    10ca:	1a 2e       	mov	r1, r26
    10cc:	aa 1b       	sub	r26, r26
    10ce:	bb 1b       	sub	r27, r27
    10d0:	fd 01       	movw	r30, r26
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <__udivmodsi4_ep>

000010d4 <__udivmodsi4_loop>:
    10d4:	aa 1f       	adc	r26, r26
    10d6:	bb 1f       	adc	r27, r27
    10d8:	ee 1f       	adc	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	a2 17       	cp	r26, r18
    10de:	b3 07       	cpc	r27, r19
    10e0:	e4 07       	cpc	r30, r20
    10e2:	f5 07       	cpc	r31, r21
    10e4:	20 f0       	brcs	.+8      	; 0x10ee <__udivmodsi4_ep>
    10e6:	a2 1b       	sub	r26, r18
    10e8:	b3 0b       	sbc	r27, r19
    10ea:	e4 0b       	sbc	r30, r20
    10ec:	f5 0b       	sbc	r31, r21

000010ee <__udivmodsi4_ep>:
    10ee:	66 1f       	adc	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	1a 94       	dec	r1
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <__udivmodsi4_loop>
    10fa:	60 95       	com	r22
    10fc:	70 95       	com	r23
    10fe:	80 95       	com	r24
    1100:	90 95       	com	r25
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	bd 01       	movw	r22, r26
    1108:	cf 01       	movw	r24, r30
    110a:	08 95       	ret

0000110c <_exit>:
    110c:	f8 94       	cli

0000110e <__stop_program>:
    110e:	ff cf       	rjmp	.-2      	; 0x110e <__stop_program>
