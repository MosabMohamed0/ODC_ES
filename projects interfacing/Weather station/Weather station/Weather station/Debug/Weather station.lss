
Weather station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001100  00001194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800068  00800068  0000119c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212f  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfe  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142d  00000000  00000000  000042dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  0000570c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd2  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000153d  00000000  00000000  00006972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00007eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_4>
      14:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6f 05 	jmp	0xade	; 0xade <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_9>
      28:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_10>
      2c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <main>
      8a:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
#include "ADC_register.h"


void ADC_voidInit(ADC_refVolt_t copy_tReferenceVoltage)
{
	switch(copy_tReferenceVoltage)
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	59 f0       	breq	.+22     	; 0xac <ADC_voidInit+0x1a>
      96:	18 f0       	brcs	.+6      	; 0x9e <ADC_voidInit+0xc>
      98:	82 30       	cpi	r24, 0x02	; 2
      9a:	79 f0       	breq	.+30     	; 0xba <ADC_voidInit+0x28>
      9c:	14 c0       	rjmp	.+40     	; 0xc6 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG, REFS0);
      9e:	87 b1       	in	r24, 0x07	; 7
      a0:	80 64       	ori	r24, 0x40	; 64
      a2:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG, REFS1);
      a4:	87 b1       	in	r24, 0x07	; 7
      a6:	8f 77       	andi	r24, 0x7F	; 127
      a8:	87 b9       	out	0x07, r24	; 7
		break;
      aa:	0d c0       	rjmp	.+26     	; 0xc6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG, REFS0);
      ac:	87 b1       	in	r24, 0x07	; 7
      ae:	8f 7b       	andi	r24, 0xBF	; 191
      b0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG, REFS1);
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 77       	andi	r24, 0x7F	; 127
      b6:	87 b9       	out	0x07, r24	; 7
		break;
      b8:	06 c0       	rjmp	.+12     	; 0xc6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG, REFS0);
      ba:	87 b1       	in	r24, 0x07	; 7
      bc:	80 64       	ori	r24, 0x40	; 64
      be:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG, REFS1);
      c0:	87 b1       	in	r24, 0x07	; 7
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	// Select Right Adjustment
	CLR_BIT(ADCSRA_REG, ADLAR);
      c6:	86 b1       	in	r24, 0x06	; 6
      c8:	8f 7d       	andi	r24, 0xDF	; 223
      ca:	86 b9       	out	0x06, r24	; 6
	
	// Single Conversion Mode
	CLR_BIT(ADCSRA_REG, ADATE);
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	8f 7d       	andi	r24, 0xDF	; 223
      d0:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG, ADIE);
      d2:	86 b1       	in	r24, 0x06	; 6
      d4:	87 7f       	andi	r24, 0xF7	; 247
      d6:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG, ADPS0);
      d8:	86 b1       	in	r24, 0x06	; 6
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG, ADPS1);
      de:	86 b1       	in	r24, 0x06	; 6
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG, ADPS2);
      e4:	86 b1       	in	r24, 0x06	; 6
      e6:	84 60       	ori	r24, 0x04	; 4
      e8:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA_REG, ADEN);
      ea:	86 b1       	in	r24, 0x06	; 6
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	86 b9       	out	0x06, r24	; 6
      f0:	08 95       	ret

000000f2 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(ADC_channelIds_t copy_tChannelId, u16* copy_pu16DigitalValue)
{
	if((copy_pu16DigitalValue != NULL)&&(copy_tChannelId <= 31))
      f2:	61 15       	cp	r22, r1
      f4:	71 05       	cpc	r23, r1
      f6:	a9 f0       	breq	.+42     	; 0x122 <ADC_voidGetDigitalValue+0x30>
      f8:	80 32       	cpi	r24, 0x20	; 32
      fa:	98 f4       	brcc	.+38     	; 0x122 <ADC_voidGetDigitalValue+0x30>
	{
		//Clear ADMUX Channel Bits
		ADMUX_REG &= 0xE0; //0b11100000
      fc:	97 b1       	in	r25, 0x07	; 7
      fe:	90 7e       	andi	r25, 0xE0	; 224
     100:	97 b9       	out	0x07, r25	; 7
		
		// Select Channel Number
		ADMUX_REG |= copy_tChannelId;
     102:	97 b1       	in	r25, 0x07	; 7
     104:	89 2b       	or	r24, r25
     106:	87 b9       	out	0x07, r24	; 7
		
		// Start Conversition
		SET_BIT(ADCSRA_REG, ADSC);
     108:	86 b1       	in	r24, 0x06	; 6
     10a:	80 64       	ori	r24, 0x40	; 64
     10c:	86 b9       	out	0x06, r24	; 6
		
		// Busy Wait for ADC Flag  /* Time Out */
		while(0 == GET_BIT(ADCSRA_REG ,ADIF));
     10e:	34 9b       	sbis	0x06, 4	; 6
     110:	fe cf       	rjmp	.-4      	; 0x10e <ADC_voidGetDigitalValue+0x1c>
		
		// Clear ADC flag (WROC >> Write One to Clear)
		SET_BIT(ADCSRA_REG ,ADIF);
     112:	86 b1       	in	r24, 0x06	; 6
     114:	80 61       	ori	r24, 0x10	; 16
     116:	86 b9       	out	0x06, r24	; 6
		
		// Pass out ADC data 
		*copy_pu16DigitalValue = ADC_u16_REG;
     118:	84 b1       	in	r24, 0x04	; 4
     11a:	95 b1       	in	r25, 0x05	; 5
     11c:	fb 01       	movw	r30, r22
     11e:	91 83       	std	Z+1, r25	; 0x01
     120:	80 83       	st	Z, r24
     122:	08 95       	ret

00000124 <DCM_voidInit>:


void DCM_voidInit(u8 copy_u8MotorId)
{
	/* Initializ H-Bridge As Output Pins depend on motor id*/
	switch(copy_u8MotorId)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	19 f0       	breq	.+6      	; 0x12e <DCM_voidInit+0xa>
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	89 f0       	breq	.+34     	; 0x14e <DCM_voidInit+0x2a>
     12c:	08 95       	ret
	{
	case DCM_MOTOR_A:
		DIO_voidSetPinDirection(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_OUTPUT);
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_OUTPUT);
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	83 e0       	ldi	r24, 0x03	; 3
     13e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, DIO_PIN_OUTPUT);
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	63 e0       	ldi	r22, 0x03	; 3
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
		break;
     14c:	08 95       	ret

	case DCM_MOTOR_B:
		DIO_voidSetPinDirection(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_OUTPUT);
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_OUTPUT);
     158:	41 e0       	ldi	r20, 0x01	; 1
     15a:	66 e0       	ldi	r22, 0x06	; 6
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, DIO_PIN_OUTPUT);
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	65 e0       	ldi	r22, 0x05	; 5
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     16c:	08 95       	ret

0000016e <DCM_voidOn>:


void DCM_voidOn(u8 copy_u8MotorId, u8 Copy_u8MotorDirection)
{
	/* Turn DC motor on using H-Bridge Pins depend on Copy_u8Direction*/
	switch(copy_u8MotorId)
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	19 f0       	breq	.+6      	; 0x178 <DCM_voidOn+0xa>
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	09 f1       	breq	.+66     	; 0x1b8 <DCM_voidOn+0x4a>
     176:	08 95       	ret
	{
	case DCM_MOTOR_A:
		switch(Copy_u8MotorDirection)
     178:	61 30       	cpi	r22, 0x01	; 1
     17a:	19 f0       	breq	.+6      	; 0x182 <DCM_voidOn+0x14>
     17c:	62 30       	cpi	r22, 0x02	; 2
     17e:	61 f0       	breq	.+24     	; 0x198 <DCM_voidOn+0x2a>
     180:	15 c0       	rjmp	.+42     	; 0x1ac <DCM_voidOn+0x3e>
		{
		case DCM_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_HIGH);
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_LOW);
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			break;
     196:	0a c0       	rjmp	.+20     	; 0x1ac <DCM_voidOn+0x3e>

		case DCM_COUNTER_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_LOW);
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_HIGH);
     1a2:	41 e0       	ldi	r20, 0x01	; 1
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			break;
		}
		DIO_voidSetPinValue(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, DIO_PIN_HIGH);
     1ac:	41 e0       	ldi	r20, 0x01	; 1
     1ae:	63 e0       	ldi	r22, 0x03	; 3
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
		break;
     1b6:	08 95       	ret

		case DCM_MOTOR_B:
			switch(Copy_u8MotorDirection)
     1b8:	61 30       	cpi	r22, 0x01	; 1
     1ba:	19 f0       	breq	.+6      	; 0x1c2 <DCM_voidOn+0x54>
     1bc:	62 30       	cpi	r22, 0x02	; 2
     1be:	61 f0       	breq	.+24     	; 0x1d8 <DCM_voidOn+0x6a>
     1c0:	15 c0       	rjmp	.+42     	; 0x1ec <DCM_voidOn+0x7e>
			{
			case DCM_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_HIGH);
     1c2:	41 e0       	ldi	r20, 0x01	; 1
     1c4:	65 e0       	ldi	r22, 0x05	; 5
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_LOW);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	66 e0       	ldi	r22, 0x06	; 6
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				break;
     1d6:	0a c0       	rjmp	.+20     	; 0x1ec <DCM_voidOn+0x7e>

			case DCM_COUNTER_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_LOW);
     1d8:	40 e0       	ldi	r20, 0x00	; 0
     1da:	65 e0       	ldi	r22, 0x05	; 5
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_HIGH);
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	66 e0       	ldi	r22, 0x06	; 6
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				break;
			}
			DIO_voidSetPinValue(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, DIO_PIN_HIGH);
     1ec:	41 e0       	ldi	r20, 0x01	; 1
     1ee:	65 e0       	ldi	r22, 0x05	; 5
     1f0:	83 e0       	ldi	r24, 0x03	; 3
     1f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     1f6:	08 95       	ret

000001f8 <DCM_voidControlSpeed>:
	}
}


void DCM_voidControlSpeed(u8 copy_u8MotorId, u8 Copy_u8MotorDirection, u8 Copy_u8Speed)
{
     1f8:	cf 93       	push	r28
     1fa:	c4 2f       	mov	r28, r20
	/* Turn DC motor on with Controlling desired(motorId) DC motor speed using PWM0 by setting Duty Cycle and turn it on using H-Bridge
	 By Setting Dir and Enable pins depend on motorDirection*/
	switch(copy_u8MotorId)
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	19 f0       	breq	.+6      	; 0x206 <DCM_voidControlSpeed+0xe>
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	09 f1       	breq	.+66     	; 0x246 <DCM_voidControlSpeed+0x4e>
     204:	46 c0       	rjmp	.+140    	; 0x292 <DCM_voidControlSpeed+0x9a>
	{
	    case DCM_MOTOR_A:
		switch(Copy_u8MotorDirection)
     206:	61 30       	cpi	r22, 0x01	; 1
     208:	19 f0       	breq	.+6      	; 0x210 <DCM_voidControlSpeed+0x18>
     20a:	62 30       	cpi	r22, 0x02	; 2
     20c:	61 f0       	breq	.+24     	; 0x226 <DCM_voidControlSpeed+0x2e>
     20e:	15 c0       	rjmp	.+42     	; 0x23a <DCM_voidControlSpeed+0x42>
		{
		case DCM_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_HIGH);
     210:	41 e0       	ldi	r20, 0x01	; 1
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_LOW);
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			break;
     224:	0a c0       	rjmp	.+20     	; 0x23a <DCM_voidControlSpeed+0x42>

		case DCM_COUNTER_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_LOW);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	83 e0       	ldi	r24, 0x03	; 3
     22c:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_HIGH);
     230:	41 e0       	ldi	r20, 0x01	; 1
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
			break;
		}
		PWM_voidInitChannel_0();   // my
     23a:	0e 94 3f 04 	call	0x87e	; 0x87e <PWM_voidInitChannel_0>
		PWM_voidGenerate_PWM_Channel_0(Copy_u8Speed); // my
     23e:	8c 2f       	mov	r24, r28
     240:	0e 94 5f 04 	call	0x8be	; 0x8be <PWM_voidGenerate_PWM_Channel_0>
// 		PWM_voidInitChannel_1B();
// 		PWM_voidGenerate_PWM_Channel_1B(Copy_u8Speed, 1000);
		break;
     244:	26 c0       	rjmp	.+76     	; 0x292 <DCM_voidControlSpeed+0x9a>

		case DCM_MOTOR_B:
			switch(Copy_u8MotorDirection)
     246:	61 30       	cpi	r22, 0x01	; 1
     248:	19 f0       	breq	.+6      	; 0x250 <DCM_voidControlSpeed+0x58>
     24a:	62 30       	cpi	r22, 0x02	; 2
     24c:	61 f0       	breq	.+24     	; 0x266 <DCM_voidControlSpeed+0x6e>
     24e:	15 c0       	rjmp	.+42     	; 0x27a <DCM_voidControlSpeed+0x82>
			{
			case DCM_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_HIGH);
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	65 e0       	ldi	r22, 0x05	; 5
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_LOW);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	66 e0       	ldi	r22, 0x06	; 6
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				break;
     264:	0a c0       	rjmp	.+20     	; 0x27a <DCM_voidControlSpeed+0x82>

			case DCM_COUNTER_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_LOW);
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_HIGH);
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	66 e0       	ldi	r22, 0x06	; 6
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
				break;
			}
			PWM_voidInitChannel_1A();
     27a:	0e 94 4c 04 	call	0x898	; 0x898 <PWM_voidInitChannel_1A>
			PWM_voidGenerate_PWM_Channel_1A(Copy_u8Speed, 1000);
     27e:	6c 2f       	mov	r22, r28
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__floatunsisf>
     28a:	48 ee       	ldi	r20, 0xE8	; 232
     28c:	53 e0       	ldi	r21, 0x03	; 3
     28e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <PWM_voidGenerate_PWM_Channel_1A>
			break;
	}
}
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <DCM_voidOff>:


void DCM_voidOff(u8 copy_u8MotorId)
{
	switch(copy_u8MotorId)
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	19 f0       	breq	.+6      	; 0x2a0 <DCM_voidOff+0xa>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	39 f0       	breq	.+14     	; 0x2ac <DCM_voidOff+0x16>
     29e:	08 95       	ret
	{
	    case DCM_MOTOR_A:
	    DIO_voidSetPinValue(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, DIO_PIN_LOW);
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	63 e0       	ldi	r22, 0x03	; 3
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
		break;
     2aa:	08 95       	ret

	    case DCM_MOTOR_B:
	   	DIO_voidSetPinValue(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, DIO_PIN_LOW);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	65 e0       	ldi	r22, 0x05	; 5
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     2b6:	08 95       	ret

000002b8 <DIO_voidSetPinDirection>:
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinDirection<=DIO_PIN_OUTPUT))
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	08 f0       	brcs	.+2      	; 0x2be <DIO_voidSetPinDirection+0x6>
     2bc:	7e c0       	rjmp	.+252    	; 0x3ba <DIO_voidSetPinDirection+0x102>
     2be:	68 30       	cpi	r22, 0x08	; 8
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <DIO_voidSetPinDirection+0xc>
     2c2:	7b c0       	rjmp	.+246    	; 0x3ba <DIO_voidSetPinDirection+0x102>
     2c4:	42 30       	cpi	r20, 0x02	; 2
     2c6:	08 f0       	brcs	.+2      	; 0x2ca <DIO_voidSetPinDirection+0x12>
     2c8:	78 c0       	rjmp	.+240    	; 0x3ba <DIO_voidSetPinDirection+0x102>
	{
		switch(copy_u8PortId)
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	19 f1       	breq	.+70     	; 0x314 <DIO_voidSetPinDirection+0x5c>
     2ce:	30 f0       	brcs	.+12     	; 0x2dc <DIO_voidSetPinDirection+0x24>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	e1 f1       	breq	.+120    	; 0x34c <DIO_voidSetPinDirection+0x94>
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_voidSetPinDirection+0x22>
     2d8:	55 c0       	rjmp	.+170    	; 0x384 <DIO_voidSetPinDirection+0xcc>
     2da:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinDirection)
     2dc:	44 23       	and	r20, r20
     2de:	19 f0       	breq	.+6      	; 0x2e6 <DIO_voidSetPinDirection+0x2e>
     2e0:	41 30       	cpi	r20, 0x01	; 1
     2e2:	69 f0       	breq	.+26     	; 0x2fe <DIO_voidSetPinDirection+0x46>
     2e4:	08 95       	ret
			{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG, copy_u8PinId);
     2e6:	2a b3       	in	r18, 0x1a	; 26
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinDirection+0x3a>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinDirection+0x36>
     2f6:	80 95       	com	r24
     2f8:	82 23       	and	r24, r18
     2fa:	8a bb       	out	0x1a, r24	; 26
				break;
     2fc:	08 95       	ret

			case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG, copy_u8PinId);
     2fe:	2a b3       	in	r18, 0x1a	; 26
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_voidSetPinDirection+0x52>
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	6a 95       	dec	r22
     30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_voidSetPinDirection+0x4e>
     30e:	82 2b       	or	r24, r18
     310:	8a bb       	out	0x1a, r24	; 26
				break;
     312:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinDirection)
     314:	44 23       	and	r20, r20
     316:	19 f0       	breq	.+6      	; 0x31e <DIO_voidSetPinDirection+0x66>
     318:	41 30       	cpi	r20, 0x01	; 1
     31a:	69 f0       	breq	.+26     	; 0x336 <DIO_voidSetPinDirection+0x7e>
     31c:	08 95       	ret
				{
				case DIO_PIN_INPUT:
					CLR_BIT(DDRB_REG, copy_u8PinId);
     31e:	27 b3       	in	r18, 0x17	; 23
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPinDirection+0x72>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPinDirection+0x6e>
     32e:	80 95       	com	r24
     330:	82 23       	and	r24, r18
     332:	87 bb       	out	0x17, r24	; 23
					break;
     334:	08 95       	ret

				case DIO_PIN_OUTPUT:
					SET_BIT(DDRB_REG, copy_u8PinId);
     336:	27 b3       	in	r18, 0x17	; 23
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_voidSetPinDirection+0x8a>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	6a 95       	dec	r22
     344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_voidSetPinDirection+0x86>
     346:	82 2b       	or	r24, r18
     348:	87 bb       	out	0x17, r24	; 23
					break;
     34a:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinDirection)
     34c:	44 23       	and	r20, r20
     34e:	19 f0       	breq	.+6      	; 0x356 <DIO_voidSetPinDirection+0x9e>
     350:	41 30       	cpi	r20, 0x01	; 1
     352:	69 f0       	breq	.+26     	; 0x36e <DIO_voidSetPinDirection+0xb6>
     354:	08 95       	ret
					{
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG, copy_u8PinId);
     356:	24 b3       	in	r18, 0x14	; 20
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_voidSetPinDirection+0xaa>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	6a 95       	dec	r22
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_voidSetPinDirection+0xa6>
     366:	80 95       	com	r24
     368:	82 23       	and	r24, r18
     36a:	84 bb       	out	0x14, r24	; 20
						break;
     36c:	08 95       	ret

					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG, copy_u8PinId);
     36e:	24 b3       	in	r18, 0x14	; 20
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_voidSetPinDirection+0xc2>
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	6a 95       	dec	r22
     37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_voidSetPinDirection+0xbe>
     37e:	82 2b       	or	r24, r18
     380:	84 bb       	out	0x14, r24	; 20
						break;
     382:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinDirection)
     384:	44 23       	and	r20, r20
     386:	19 f0       	breq	.+6      	; 0x38e <DIO_voidSetPinDirection+0xd6>
     388:	41 30       	cpi	r20, 0x01	; 1
     38a:	69 f0       	breq	.+26     	; 0x3a6 <DIO_voidSetPinDirection+0xee>
     38c:	08 95       	ret
						{
						case DIO_PIN_INPUT:
							CLR_BIT(DDRD_REG, copy_u8PinId);
     38e:	21 b3       	in	r18, 0x11	; 17
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_voidSetPinDirection+0xe2>
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	6a 95       	dec	r22
     39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_voidSetPinDirection+0xde>
     39e:	80 95       	com	r24
     3a0:	82 23       	and	r24, r18
     3a2:	81 bb       	out	0x11, r24	; 17
							break;
     3a4:	08 95       	ret

						case DIO_PIN_OUTPUT:
							SET_BIT(DDRD_REG, copy_u8PinId);
     3a6:	21 b3       	in	r18, 0x11	; 17
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_voidSetPinDirection+0xfa>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	6a 95       	dec	r22
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_voidSetPinDirection+0xf6>
     3b6:	82 2b       	or	r24, r18
     3b8:	81 bb       	out	0x11, r24	; 17
     3ba:	08 95       	ret

000003bc <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinValue<=DIO_PIN_HIGH))
     3bc:	84 30       	cpi	r24, 0x04	; 4
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <DIO_voidSetPinValue+0x6>
     3c0:	7e c0       	rjmp	.+252    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     3c2:	68 30       	cpi	r22, 0x08	; 8
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <DIO_voidSetPinValue+0xc>
     3c6:	7b c0       	rjmp	.+246    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     3c8:	42 30       	cpi	r20, 0x02	; 2
     3ca:	08 f0       	brcs	.+2      	; 0x3ce <DIO_voidSetPinValue+0x12>
     3cc:	78 c0       	rjmp	.+240    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
	{
		switch(copy_u8PortId)
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	19 f1       	breq	.+70     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3d2:	30 f0       	brcs	.+12     	; 0x3e0 <DIO_voidSetPinValue+0x24>
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	e1 f1       	breq	.+120    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     3d8:	83 30       	cpi	r24, 0x03	; 3
     3da:	09 f4       	brne	.+2      	; 0x3de <DIO_voidSetPinValue+0x22>
     3dc:	55 c0       	rjmp	.+170    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     3de:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinValue)
     3e0:	44 23       	and	r20, r20
     3e2:	19 f0       	breq	.+6      	; 0x3ea <DIO_voidSetPinValue+0x2e>
     3e4:	41 30       	cpi	r20, 0x01	; 1
     3e6:	69 f0       	breq	.+26     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3e8:	08 95       	ret
			{
			case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG, copy_u8PinId);
     3ea:	2b b3       	in	r18, 0x1b	; 27
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_voidSetPinValue+0x3a>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	6a 95       	dec	r22
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_voidSetPinValue+0x36>
     3fa:	80 95       	com	r24
     3fc:	82 23       	and	r24, r18
     3fe:	8b bb       	out	0x1b, r24	; 27
				break;
     400:	08 95       	ret

			case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG, copy_u8PinId);
     402:	2b b3       	in	r18, 0x1b	; 27
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	6a 95       	dec	r22
     410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     412:	82 2b       	or	r24, r18
     414:	8b bb       	out	0x1b, r24	; 27
				break;
     416:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinValue)
     418:	44 23       	and	r20, r20
     41a:	19 f0       	breq	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41c:	41 30       	cpi	r20, 0x01	; 1
     41e:	69 f0       	breq	.+26     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     420:	08 95       	ret
				{
				case DIO_PIN_LOW:
					CLR_BIT(PORTB_REG, copy_u8PinId);
     422:	28 b3       	in	r18, 0x18	; 24
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	6a 95       	dec	r22
     430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     432:	80 95       	com	r24
     434:	82 23       	and	r24, r18
     436:	88 bb       	out	0x18, r24	; 24
					break;
     438:	08 95       	ret

				case DIO_PIN_HIGH:
					SET_BIT(PORTB_REG, copy_u8PinId);
     43a:	28 b3       	in	r18, 0x18	; 24
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     44a:	82 2b       	or	r24, r18
     44c:	88 bb       	out	0x18, r24	; 24
					break;
     44e:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinValue)
     450:	44 23       	and	r20, r20
     452:	19 f0       	breq	.+6      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     454:	41 30       	cpi	r20, 0x01	; 1
     456:	69 f0       	breq	.+26     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     458:	08 95       	ret
					{
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG, copy_u8PinId);
     45a:	25 b3       	in	r18, 0x15	; 21
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	6a 95       	dec	r22
     468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     46a:	80 95       	com	r24
     46c:	82 23       	and	r24, r18
     46e:	85 bb       	out	0x15, r24	; 21
						break;
     470:	08 95       	ret

					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG, copy_u8PinId);
     472:	25 b3       	in	r18, 0x15	; 21
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	6a 95       	dec	r22
     480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     482:	82 2b       	or	r24, r18
     484:	85 bb       	out	0x15, r24	; 21
						break;
     486:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinValue)
     488:	44 23       	and	r20, r20
     48a:	19 f0       	breq	.+6      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     48c:	41 30       	cpi	r20, 0x01	; 1
     48e:	69 f0       	breq	.+26     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     490:	08 95       	ret
						{
						case DIO_PIN_LOW:
							CLR_BIT(PORTD_REG, copy_u8PinId);
     492:	22 b3       	in	r18, 0x12	; 18
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	6a 95       	dec	r22
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     4a2:	80 95       	com	r24
     4a4:	82 23       	and	r24, r18
     4a6:	82 bb       	out	0x12, r24	; 18
							break;
     4a8:	08 95       	ret

						case DIO_PIN_HIGH:
							SET_BIT(PORTD_REG, copy_u8PinId);
     4aa:	22 b3       	in	r18, 0x12	; 18
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4ba:	82 2b       	or	r24, r18
     4bc:	82 bb       	out	0x12, r24	; 18
     4be:	08 95       	ret

000004c0 <PRV_voidWriteHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	80 fd       	sbrc	r24, 0
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <PRV_voidWriteHalfPort+0x14>
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <PRV_voidWriteHalfPort+0x1e>
     4d4:	41 e0       	ldi	r20, 0x01	; 1
     4d6:	64 e0       	ldi	r22, 0x04	; 4
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     4de:	c1 fd       	sbrc	r28, 1
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <PRV_voidWriteHalfPort+0x2e>
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	65 e0       	ldi	r22, 0x05	; 5
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <PRV_voidWriteHalfPort+0x38>
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	65 e0       	ldi	r22, 0x05	; 5
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     4f8:	c2 fd       	sbrc	r28, 2
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <PRV_voidWriteHalfPort+0x48>
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	66 e0       	ldi	r22, 0x06	; 6
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     506:	05 c0       	rjmp	.+10     	; 0x512 <PRV_voidWriteHalfPort+0x52>
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	66 e0       	ldi	r22, 0x06	; 6
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     512:	c3 fd       	sbrc	r28, 3
     514:	06 c0       	rjmp	.+12     	; 0x522 <PRV_voidWriteHalfPort+0x62>
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	67 e0       	ldi	r22, 0x07	; 7
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     520:	05 c0       	rjmp	.+10     	; 0x52c <PRV_voidWriteHalfPort+0x6c>
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	67 e0       	ldi	r22, 0x07	; 7
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <PRV_voidEnableTriggerWrite>:
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     53a:	8f e9       	ldi	r24, 0x9F	; 159
     53c:	9f e0       	ldi	r25, 0x0F	; 15
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <PRV_voidEnableTriggerWrite+0xe>
     542:	00 c0       	rjmp	.+0      	; 0x544 <PRV_voidEnableTriggerWrite+0x14>
     544:	00 00       	nop
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	62 e0       	ldi	r22, 0x02	; 2
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     550:	08 95       	ret

00000552 <LCD_voidDisplayChar>:
     552:	cf 93       	push	r28
     554:	c8 2f       	mov	r28, r24
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	63 e0       	ldi	r22, 0x03	; 3
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     56a:	8c 2f       	mov	r24, r28
     56c:	82 95       	swap	r24
     56e:	8f 70       	andi	r24, 0x0F	; 15
     570:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PRV_voidWriteHalfPort>
     574:	0e 94 98 02 	call	0x530	; 0x530 <PRV_voidEnableTriggerWrite>
     578:	8c 2f       	mov	r24, r28
     57a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PRV_voidWriteHalfPort>
     57e:	0e 94 98 02 	call	0x530	; 0x530 <PRV_voidEnableTriggerWrite>
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <LCD_voidSendCommand>:
     586:	cf 93       	push	r28
     588:	c8 2f       	mov	r28, r24
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	63 e0       	ldi	r22, 0x03	; 3
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     59e:	8c 2f       	mov	r24, r28
     5a0:	82 95       	swap	r24
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PRV_voidWriteHalfPort>
     5a8:	0e 94 98 02 	call	0x530	; 0x530 <PRV_voidEnableTriggerWrite>
     5ac:	8c 2f       	mov	r24, r28
     5ae:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PRV_voidWriteHalfPort>
     5b2:	0e 94 98 02 	call	0x530	; 0x530 <PRV_voidEnableTriggerWrite>
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <LCD_voidInit>:
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	63 e0       	ldi	r22, 0x03	; 3
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	62 e0       	ldi	r22, 0x02	; 2
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	64 e0       	ldi	r22, 0x04	; 4
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	65 e0       	ldi	r22, 0x05	; 5
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	66 e0       	ldi	r22, 0x06	; 6
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	67 e0       	ldi	r22, 0x07	; 7
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
     600:	2f e7       	ldi	r18, 0x7F	; 127
     602:	85 eb       	ldi	r24, 0xB5	; 181
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	21 50       	subi	r18, 0x01	; 1
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <LCD_voidInit+0x4c>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_voidInit+0x56>
     610:	00 00       	nop
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	0e 94 de 01 	call	0x3bc	; 0x3bc <DIO_voidSetPinValue>
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PRV_voidWriteHalfPort>
     62c:	0e 94 98 02 	call	0x530	; 0x530 <PRV_voidEnableTriggerWrite>
     630:	88 e2       	ldi	r24, 0x28	; 40
     632:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_voidSendCommand>
     636:	20 ef       	ldi	r18, 0xF0	; 240
     638:	2a 95       	dec	r18
     63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_voidInit+0x7e>
     63c:	8f e0       	ldi	r24, 0x0F	; 15
     63e:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_voidSendCommand>
     642:	80 ef       	ldi	r24, 0xF0	; 240
     644:	8a 95       	dec	r24
     646:	f1 f7       	brne	.-4      	; 0x644 <LCD_voidInit+0x8a>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_voidSendCommand>
     64e:	8f e3       	ldi	r24, 0x3F	; 63
     650:	9f e1       	ldi	r25, 0x1F	; 31
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <LCD_voidInit+0x98>
     656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_voidInit+0x9e>
     658:	00 00       	nop
     65a:	86 e0       	ldi	r24, 0x06	; 6
     65c:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_voidSendCommand>
     660:	08 95       	ret

00000662 <LCD_voidDisplayString>:
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	29 f4       	brne	.+10     	; 0x676 <LCD_voidDisplayString+0x14>
     66c:	0c c0       	rjmp	.+24     	; 0x686 <LCD_voidDisplayString+0x24>
     66e:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_voidDisplayChar>
     672:	cf 5f       	subi	r28, 0xFF	; 255
     674:	02 c0       	rjmp	.+4      	; 0x67a <LCD_voidDisplayString+0x18>
     676:	8c 01       	movw	r16, r24
     678:	c0 e0       	ldi	r28, 0x00	; 0
     67a:	f8 01       	movw	r30, r16
     67c:	ec 0f       	add	r30, r28
     67e:	f1 1d       	adc	r31, r1
     680:	80 81       	ld	r24, Z
     682:	81 11       	cpse	r24, r1
     684:	f4 cf       	rjmp	.-24     	; 0x66e <LCD_voidDisplayString+0xc>
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <LCD_voidClear>:
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_voidSendCommand>
     694:	8f e3       	ldi	r24, 0x3F	; 63
     696:	9f e1       	ldi	r25, 0x1F	; 31
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_voidClear+0xa>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_voidClear+0x10>
     69e:	00 00       	nop
     6a0:	08 95       	ret

000006a2 <LCD_voidDisplayNumber>:
	}
}


void LCD_voidDisplayNumber(u32 copy_u32Number)
{
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	8b 01       	movw	r16, r22
     6b0:	9c 01       	movw	r18, r24
	u32 local_u32ReversedNumber = 1;
	if(copy_u32Number == 0)
     6b2:	67 2b       	or	r22, r23
     6b4:	68 2b       	or	r22, r24
     6b6:	69 2b       	or	r22, r25
     6b8:	49 f5       	brne	.+82     	; 0x70c <LCD_voidDisplayNumber+0x6a>
	{
		LCD_voidDisplayChar('0');
     6ba:	80 e3       	ldi	r24, 0x30	; 48
     6bc:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_voidDisplayChar>
     6c0:	45 c0       	rjmp	.+138    	; 0x74c <LCD_voidDisplayNumber+0xaa>
	}
	else
	{
		while(copy_u32Number != 0)
		{
			local_u32ReversedNumber = (local_u32ReversedNumber*10) + (copy_u32Number%10);
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	aa 1f       	adc	r26, r26
     6cc:	bb 1f       	adc	r27, r27
     6ce:	6c 01       	movw	r12, r24
     6d0:	7d 01       	movw	r14, r26
     6d2:	cc 0c       	add	r12, r12
     6d4:	dd 1c       	adc	r13, r13
     6d6:	ee 1c       	adc	r14, r14
     6d8:	ff 1c       	adc	r15, r15
     6da:	cc 0c       	add	r12, r12
     6dc:	dd 1c       	adc	r13, r13
     6de:	ee 1c       	adc	r14, r14
     6e0:	ff 1c       	adc	r15, r15
     6e2:	c8 0e       	add	r12, r24
     6e4:	d9 1e       	adc	r13, r25
     6e6:	ea 1e       	adc	r14, r26
     6e8:	fb 1e       	adc	r15, r27
     6ea:	c9 01       	movw	r24, r18
     6ec:	b8 01       	movw	r22, r16
     6ee:	2a e0       	ldi	r18, 0x0A	; 10
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	0e 94 4d 08 	call	0x109a	; 0x109a <__udivmodsi4>
     6fa:	6c 0d       	add	r22, r12
     6fc:	7d 1d       	adc	r23, r13
     6fe:	8e 1d       	adc	r24, r14
     700:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
     702:	02 2f       	mov	r16, r18
     704:	13 2f       	mov	r17, r19
     706:	24 2f       	mov	r18, r20
     708:	35 2f       	mov	r19, r21
     70a:	04 c0       	rjmp	.+8      	; 0x714 <LCD_voidDisplayNumber+0x72>
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
	{
		LCD_voidDisplayChar('0');
	}
	else
	{
		while(copy_u32Number != 0)
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	21 05       	cpc	r18, r1
     71a:	31 05       	cpc	r19, r1
     71c:	91 f6       	brne	.-92     	; 0x6c2 <LCD_voidDisplayNumber+0x20>
			copy_u32Number /= 10;
		}

		do
		{
			LCD_voidDisplayChar((local_u32ReversedNumber%10) + '0');
     71e:	2a e0       	ldi	r18, 0x0A	; 10
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	0e 94 4d 08 	call	0x109a	; 0x109a <__udivmodsi4>
     72a:	e2 2e       	mov	r14, r18
     72c:	f3 2e       	mov	r15, r19
     72e:	04 2f       	mov	r16, r20
     730:	15 2f       	mov	r17, r21
     732:	80 e3       	ldi	r24, 0x30	; 48
     734:	86 0f       	add	r24, r22
     736:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_voidDisplayChar>
			local_u32ReversedNumber /= 10;
     73a:	6e 2d       	mov	r22, r14
     73c:	7f 2d       	mov	r23, r15
     73e:	80 2f       	mov	r24, r16
     740:	91 2f       	mov	r25, r17
		} while (local_u32ReversedNumber != 1);
     742:	61 30       	cpi	r22, 0x01	; 1
     744:	71 05       	cpc	r23, r1
     746:	81 05       	cpc	r24, r1
     748:	91 05       	cpc	r25, r1
     74a:	49 f7       	brne	.-46     	; 0x71e <LCD_voidDisplayNumber+0x7c>
	}
}
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <LM35_voidInit>:
#include "LM35_config.h"


void LM35_voidInit(void)
{
	DIO_voidSetPinDirection(DIO_PORTA, LM35_CHANNEL_NUM, DIO_PIN_INPUT);
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_REFERENCE_AREF); //my
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
     76a:	08 95       	ret

0000076c <LM35_voidGetTemperature>:
}


void LM35_voidGetTemperature(u8* copy_u8Temperature)
{
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	00 d0       	rcall	.+0      	; 0x776 <LM35_voidGetTemperature+0xa>
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	if(copy_u8Temperature!=NULL)
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	21 f1       	breq	.+72     	; 0x7c6 <LM35_voidGetTemperature+0x5a>
     77e:	8c 01       	movw	r16, r24
	{
		u16 local_u16DigitalVal, local_u16AnalogVal;

		ADC_voidGetDigitalValue(LM35_CHANNEL_NUM, &local_u16DigitalVal);//my
     780:	be 01       	movw	r22, r28
     782:	6f 5f       	subi	r22, 0xFF	; 255
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_voidGetDigitalValue>
		
		// depend on Refrence volt AVCC (5V)
		local_u16AnalogVal = ((u32)local_u16DigitalVal*5000)/1024;
     78c:	29 81       	ldd	r18, Y+1	; 0x01
     78e:	3a 81       	ldd	r19, Y+2	; 0x02
     790:	a8 e8       	ldi	r26, 0x88	; 136
     792:	b3 e1       	ldi	r27, 0x13	; 19
     794:	0e 94 6f 08 	call	0x10de	; 0x10de <__umulhisi3>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	01 2e       	mov	r0, r17
     79e:	1a e0       	ldi	r17, 0x0A	; 10
     7a0:	56 95       	lsr	r21
     7a2:	47 95       	ror	r20
     7a4:	37 95       	ror	r19
     7a6:	27 95       	ror	r18
     7a8:	1a 95       	dec	r17
     7aa:	d1 f7       	brne	.-12     	; 0x7a0 <LM35_voidGetTemperature+0x34>
     7ac:	10 2d       	mov	r17, r0

		*copy_u8Temperature = local_u16AnalogVal/10;
     7ae:	ad ec       	ldi	r26, 0xCD	; 205
     7b0:	bc ec       	ldi	r27, 0xCC	; 204
     7b2:	0e 94 6f 08 	call	0x10de	; 0x10de <__umulhisi3>
     7b6:	96 95       	lsr	r25
     7b8:	87 95       	ror	r24
     7ba:	96 95       	lsr	r25
     7bc:	87 95       	ror	r24
     7be:	96 95       	lsr	r25
     7c0:	87 95       	ror	r24
     7c2:	f8 01       	movw	r30, r16
     7c4:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <main>:

u8 temp = 0;
int main(void)
{
	//ADC_voidInit(ADC_REFERENCE_AREF);
 	LM35_voidInit();
     7d4:	0e 94 ad 03 	call	0x75a	; 0x75a <LM35_voidInit>
 	LCD_voidInit();
     7d8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <LCD_voidInit>
	DCM_voidInit(DCM_MOTOR_A);
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 92 00 	call	0x124	; 0x124 <DCM_voidInit>
	while (1)
	{
		LM35_voidGetTemperature(&temp);
     7e2:	88 e6       	ldi	r24, 0x68	; 104
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 b6 03 	call	0x76c	; 0x76c <LM35_voidGetTemperature>
		LCD_voidDisplayString("temp = ");
     7ea:	80 e6       	ldi	r24, 0x60	; 96
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 31 03 	call	0x662	; 0x662 <LCD_voidDisplayString>
		LCD_voidDisplayNumber(temp);
     7f2:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_voidDisplayNumber>
 		if(temp<20)
     800:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     804:	84 31       	cpi	r24, 0x14	; 20
     806:	20 f4       	brcc	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 		{
 			DCM_voidOff(DCM_MOTOR_A);
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 4b 01 	call	0x296	; 0x296 <DCM_voidOff>
     80e:	2b c0       	rjmp	.+86     	; 0x866 <__stack+0x7>
 		}
 		else
 		{
 			DCM_voidOn(DCM_MOTOR_A,DCM_CLOCK_WISE);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 b7 00 	call	0x16e	; 0x16e <DCM_voidOn>
 			if(temp<=25)
     818:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     81c:	8a 31       	cpi	r24, 0x1A	; 26
     81e:	30 f4       	brcc	.+12     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 			{
 				DCM_voidControlSpeed(DCM_MOTOR_A,DCM_CLOCK_WISE,50);
     820:	42 e3       	ldi	r20, 0x32	; 50
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DCM_voidControlSpeed>
     82a:	1d c0       	rjmp	.+58     	; 0x866 <__stack+0x7>
 			}
 			else if(temp<=30)
     82c:	8f 31       	cpi	r24, 0x1F	; 31
     82e:	30 f4       	brcc	.+12     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 			{
 				DCM_voidControlSpeed(DCM_MOTOR_A,DCM_CLOCK_WISE,70);
     830:	46 e4       	ldi	r20, 0x46	; 70
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DCM_voidControlSpeed>
     83a:	15 c0       	rjmp	.+42     	; 0x866 <__stack+0x7>
 			}
 			else if(temp<=35)
     83c:	84 32       	cpi	r24, 0x24	; 36
     83e:	30 f4       	brcc	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 			{
 				DCM_voidControlSpeed(DCM_MOTOR_A,DCM_CLOCK_WISE,90);
     840:	4a e5       	ldi	r20, 0x5A	; 90
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DCM_voidControlSpeed>
     84a:	0d c0       	rjmp	.+26     	; 0x866 <__stack+0x7>
 			}
 			else if(temp<=40)
     84c:	89 32       	cpi	r24, 0x29	; 41
     84e:	30 f4       	brcc	.+12     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 			{
 				DCM_voidControlSpeed(DCM_MOTOR_A,DCM_CLOCK_WISE,100);
     850:	44 e6       	ldi	r20, 0x64	; 100
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DCM_voidControlSpeed>
     85a:	05 c0       	rjmp	.+10     	; 0x866 <__stack+0x7>
 			}
 			else
 			{
 				DCM_voidControlSpeed(DCM_MOTOR_A,DCM_CLOCK_WISE,100);
     85c:	44 e6       	ldi	r20, 0x64	; 100
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DCM_voidControlSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     866:	2f ef       	ldi	r18, 0xFF	; 255
     868:	83 ed       	ldi	r24, 0xD3	; 211
     86a:	90 e3       	ldi	r25, 0x30	; 48
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	80 40       	sbci	r24, 0x00	; 0
     870:	90 40       	sbci	r25, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <__stack+0xd>
     874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
     876:	00 00       	nop
 			}	
		}
		_delay_ms(1000);
		LCD_voidClear();
     878:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_voidClear>
	}
     87c:	b2 cf       	rjmp	.-156    	; 0x7e2 <main+0xe>

0000087e <PWM_voidInitChannel_0>:
#endif

#if PWM_CHANNEL_2_OUTPUT_MODE == PWM_CHANNEL_2_NONINVERTING
    // Select Non Inverting Mode
    CLR_BIT(TCCR2_REG,COM20);
    SET_BIT(TCCR2_REG,COM21);
     87e:	83 b7       	in	r24, 0x33	; 51
     880:	80 64       	ori	r24, 0x40	; 64
     882:	83 bf       	out	0x33, r24	; 51
     884:	83 b7       	in	r24, 0x33	; 51
     886:	88 60       	ori	r24, 0x08	; 8
     888:	83 bf       	out	0x33, r24	; 51
     88a:	83 b7       	in	r24, 0x33	; 51
     88c:	8f 7e       	andi	r24, 0xEF	; 239
     88e:	83 bf       	out	0x33, r24	; 51
     890:	83 b7       	in	r24, 0x33	; 51
     892:	80 62       	ori	r24, 0x20	; 32
     894:	83 bf       	out	0x33, r24	; 51
     896:	08 95       	ret

00000898 <PWM_voidInitChannel_1A>:
     898:	8f b5       	in	r24, 0x2f	; 47
     89a:	8e 7f       	andi	r24, 0xFE	; 254
     89c:	8f bd       	out	0x2f, r24	; 47
     89e:	8f b5       	in	r24, 0x2f	; 47
     8a0:	82 60       	ori	r24, 0x02	; 2
     8a2:	8f bd       	out	0x2f, r24	; 47
     8a4:	8e b5       	in	r24, 0x2e	; 46
     8a6:	88 60       	ori	r24, 0x08	; 8
     8a8:	8e bd       	out	0x2e, r24	; 46
     8aa:	8e b5       	in	r24, 0x2e	; 46
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	8e bd       	out	0x2e, r24	; 46
     8b0:	8f b5       	in	r24, 0x2f	; 47
     8b2:	8f 7b       	andi	r24, 0xBF	; 191
     8b4:	8f bd       	out	0x2f, r24	; 47
     8b6:	8f b5       	in	r24, 0x2f	; 47
     8b8:	80 68       	ori	r24, 0x80	; 128
     8ba:	8f bd       	out	0x2f, r24	; 47
     8bc:	08 95       	ret

000008be <PWM_voidGenerate_PWM_Channel_0>:
}


void PWM_voidGenerate_PWM_Channel_0(u8 copy_u8DutyCycle)
{
	if(copy_u8DutyCycle<=100)
     8be:	85 36       	cpi	r24, 0x65	; 101
     8c0:	c8 f4       	brcc	.+50     	; 0x8f4 <PWM_voidGenerate_PWM_Channel_0+0x36>
	{
		#if PWM_CHANNEL_0_MODE == PWM_CHANNEL_0_FAST_MODE
		
		#if PWM_CHANNEL_0_OUTPUT_MODE == PWM_CHANNEL_0_NONINVERTING
		OCR0_REG = (((u16)copy_u8DutyCycle*256)/100)-1;
     8c2:	28 2f       	mov	r18, r24
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	32 2f       	mov	r19, r18
     8c8:	22 27       	eor	r18, r18
     8ca:	36 95       	lsr	r19
     8cc:	27 95       	ror	r18
     8ce:	36 95       	lsr	r19
     8d0:	27 95       	ror	r18
     8d2:	ab e7       	ldi	r26, 0x7B	; 123
     8d4:	b4 e1       	ldi	r27, 0x14	; 20
     8d6:	0e 94 6f 08 	call	0x10de	; 0x10de <__umulhisi3>
     8da:	96 95       	lsr	r25
     8dc:	87 95       	ror	r24
     8de:	81 50       	subi	r24, 0x01	; 1
     8e0:	8c bf       	out	0x3c, r24	; 60
		
		#endif
		
		
		// Select Prescaler Value = 64 
	    SET_BIT(TCCR0_REG,CS00);
     8e2:	83 b7       	in	r24, 0x33	; 51
     8e4:	81 60       	ori	r24, 0x01	; 1
     8e6:	83 bf       	out	0x33, r24	; 51
	    SET_BIT(TCCR0_REG,CS01);
     8e8:	83 b7       	in	r24, 0x33	; 51
     8ea:	82 60       	ori	r24, 0x02	; 2
     8ec:	83 bf       	out	0x33, r24	; 51
	    CLR_BIT(TCCR0_REG,CS02);
     8ee:	83 b7       	in	r24, 0x33	; 51
     8f0:	8b 7f       	andi	r24, 0xFB	; 251
     8f2:	83 bf       	out	0x33, r24	; 51
     8f4:	08 95       	ret

000008f6 <PWM_voidGenerate_PWM_Channel_1A>:
	}
}


void PWM_voidGenerate_PWM_Channel_1A(f32 copy_f32DutyCycle, u16 copy_u16Frequency_hz)
{
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	6b 01       	movw	r12, r22
     904:	7c 01       	movw	r14, r24
     906:	ea 01       	movw	r28, r20
	if(copy_f32DutyCycle<=100)
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	48 ec       	ldi	r20, 0xC8	; 200
     90e:	52 e4       	ldi	r21, 0x42	; 66
     910:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     914:	18 16       	cp	r1, r24
     916:	94 f1       	brlt	.+100    	; 0x97c <PWM_voidGenerate_PWM_Channel_1A+0x86>
	{
		// under condition tick time 4 MS by setting prescaller 64
	    ICR1_u16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
     918:	9e 01       	movw	r18, r28
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	60 e9       	ldi	r22, 0x90	; 144
     920:	70 ed       	ldi	r23, 0xD0	; 208
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 4d 08 	call	0x109a	; 0x109a <__udivmodsi4>
     92a:	21 50       	subi	r18, 0x01	; 1
     92c:	31 09       	sbc	r19, r1
     92e:	37 bd       	out	0x27, r19	; 39
     930:	26 bd       	out	0x26, r18	; 38
		
		#if PWM_CHANNEL_1A_OUTPUT_MODE == PWM_CHANNEL_1A_NONINVERTING
		      OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
     932:	66 b5       	in	r22, 0x26	; 38
     934:	77 b5       	in	r23, 0x27	; 39
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__floatunsisf>
     942:	a7 01       	movw	r20, r14
     944:	96 01       	movw	r18, r12
     946:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__mulsf3>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	48 ec       	ldi	r20, 0xC8	; 200
     950:	52 e4       	ldi	r21, 0x42	; 66
     952:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__divsf3>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e8       	ldi	r20, 0x80	; 128
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__subsf3>
     962:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fixunssfsi>
     966:	7b bd       	out	0x2b, r23	; 43
     968:	6a bd       	out	0x2a, r22	; 42
		      OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
		#endif


        // Select Prescaler Value = 64
	    SET_BIT(TCCR1B_REG,CS10);
     96a:	8e b5       	in	r24, 0x2e	; 46
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	8e bd       	out	0x2e, r24	; 46
	    SET_BIT(TCCR1B_REG,CS11);
     970:	8e b5       	in	r24, 0x2e	; 46
     972:	82 60       	ori	r24, 0x02	; 2
     974:	8e bd       	out	0x2e, r24	; 46
	    CLR_BIT(TCCR1B_REG,CS12);		
     976:	8e b5       	in	r24, 0x2e	; 46
     978:	8b 7f       	andi	r24, 0xFB	; 251
     97a:	8e bd       	out	0x2e, r24	; 46
	}
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	08 95       	ret

0000098a <__vector_11>:
	}
}


ISR(TIMER0_OVF)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	2f 93       	push	r18
     996:	3f 93       	push	r19
     998:	4f 93       	push	r20
     99a:	5f 93       	push	r21
     99c:	6f 93       	push	r22
     99e:	7f 93       	push	r23
     9a0:	8f 93       	push	r24
     9a2:	9f 93       	push	r25
     9a4:	af 93       	push	r26
     9a6:	bf 93       	push	r27
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31
	static u16 local_u16OVFCounter=0;
	local_u16OVFCounter++;
     9ac:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <local_u16OVFCounter.1615>
     9b0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <local_u16OVFCounter.1615+0x1>
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <local_u16OVFCounter.1615+0x1>
     9ba:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <local_u16OVFCounter.1615>
	
	if(TMR0_OVER_FLOW_COUNTER == local_u16OVFCounter)
     9be:	81 3d       	cpi	r24, 0xD1	; 209
     9c0:	93 40       	sbci	r25, 0x03	; 3
     9c2:	69 f4       	brne	.+26     	; 0x9de <__vector_11+0x54>
	{
		// Init Timer With Preload Value
	    TCNT0_REG = TMR0_PRELOAD_VALUE;
     9c4:	81 e7       	ldi	r24, 0x71	; 113
     9c6:	82 bf       	out	0x32, r24	; 50
		
		// Clear Counter
		local_u16OVFCounter=0;
     9c8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <local_u16OVFCounter.1615+0x1>
     9cc:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <local_u16OVFCounter.1615>
		
		// Call Action
		if(PRV_pFunCallBackOVF!=NULL)
     9d0:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <PRV_pFunCallBackOVF>
     9d4:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <PRV_pFunCallBackOVF+0x1>
     9d8:	30 97       	sbiw	r30, 0x00	; 0
     9da:	09 f0       	breq	.+2      	; 0x9de <__vector_11+0x54>
		{
			PRV_pFunCallBackOVF();
     9dc:	09 95       	icall
		}
	}
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_10>:


ISR(TIMER0_COMP)
{
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	2f 93       	push	r18
     a0c:	3f 93       	push	r19
     a0e:	4f 93       	push	r20
     a10:	5f 93       	push	r21
     a12:	6f 93       	push	r22
     a14:	7f 93       	push	r23
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
	static u16 local_u16CTCCounter=0;
	local_u16CTCCounter++;
     a22:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <local_u16CTCCounter.1621>
     a26:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <local_u16CTCCounter.1621+0x1>
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <local_u16CTCCounter.1621+0x1>
     a30:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <local_u16CTCCounter.1621>
	
	if(TMR0_CTC_COUNTER == local_u16CTCCounter)
     a34:	88 3e       	cpi	r24, 0xE8	; 232
     a36:	93 40       	sbci	r25, 0x03	; 3
     a38:	59 f4       	brne	.+22     	; 0xa50 <__vector_10+0x50>
	{
		// Clear Counter
		local_u16CTCCounter=0;
     a3a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <local_u16CTCCounter.1621+0x1>
     a3e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <local_u16CTCCounter.1621>
		
		// Call Action
		if(PRV_pFunCallBackCTC!=NULL)
     a42:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <PRV_pFunCallBackCTC>
     a46:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <PRV_pFunCallBackCTC+0x1>
     a4a:	30 97       	sbiw	r30, 0x00	; 0
     a4c:	09 f0       	breq	.+2      	; 0xa50 <__vector_10+0x50>
		{
			PRV_pFunCallBackCTC();
     a4e:	09 95       	icall
		}
	}
}
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	bf 91       	pop	r27
     a56:	af 91       	pop	r26
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	7f 91       	pop	r23
     a5e:	6f 91       	pop	r22
     a60:	5f 91       	pop	r21
     a62:	4f 91       	pop	r20
     a64:	3f 91       	pop	r19
     a66:	2f 91       	pop	r18
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <__vector_9>:
	}
}


ISR(TIMER1_OVF)
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	2f 93       	push	r18
     a7e:	3f 93       	push	r19
     a80:	4f 93       	push	r20
     a82:	5f 93       	push	r21
     a84:	6f 93       	push	r22
     a86:	7f 93       	push	r23
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
     a8c:	af 93       	push	r26
     a8e:	bf 93       	push	r27
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
	static u8 local_u8OVFCounter=0;
	local_u8OVFCounter++;
     a94:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <local_u8OVFCounter.1615>
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <local_u8OVFCounter.1615>
	
	if(TMR1_OVER_FLOW_COUNTER == local_u8OVFCounter)
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	69 f4       	brne	.+26     	; 0xabc <__vector_9+0x4a>
	{
		// Init Timer With Preload Value
	    TCNT1_u16_REG = TMR1_PRELOAD_VALUE;
     aa2:	80 e7       	ldi	r24, 0x70	; 112
     aa4:	9f e2       	ldi	r25, 0x2F	; 47
     aa6:	9d bd       	out	0x2d, r25	; 45
     aa8:	8c bd       	out	0x2c, r24	; 44
		
		// Clear Counter
	    local_u8OVFCounter=0;
     aaa:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <local_u8OVFCounter.1615>
		
		// Call Action
		if(PRV_pFunCallBackOVF!=NULL)
     aae:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PRV_pFunCallBackOVF>
     ab2:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PRV_pFunCallBackOVF+0x1>
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	09 f0       	breq	.+2      	; 0xabc <__vector_9+0x4a>
		{
			PRV_pFunCallBackOVF();
     aba:	09 95       	icall
		}
	}
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_7>:


ISR(TIMER1_COMPA)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	2f 93       	push	r18
     aea:	3f 93       	push	r19
     aec:	4f 93       	push	r20
     aee:	5f 93       	push	r21
     af0:	6f 93       	push	r22
     af2:	7f 93       	push	r23
     af4:	8f 93       	push	r24
     af6:	9f 93       	push	r25
     af8:	af 93       	push	r26
     afa:	bf 93       	push	r27
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
	static u16 local_u16CTCCounter=0;
	local_u16CTCCounter++;
     b00:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <local_u16CTCCounter.1621>
     b04:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <local_u16CTCCounter.1621+0x1>
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <local_u16CTCCounter.1621+0x1>
     b0e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <local_u16CTCCounter.1621>
	
	if(TMR1_CTC_COUNTER_A == local_u16CTCCounter)
     b12:	04 97       	sbiw	r24, 0x04	; 4
     b14:	59 f4       	brne	.+22     	; 0xb2c <__vector_7+0x4e>
	{
		// Clear Counter
		local_u16CTCCounter=0;
     b16:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <local_u16CTCCounter.1621+0x1>
     b1a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <local_u16CTCCounter.1621>
		
		// Call Action
		if(PRV_pFunCallBackCTCA!=NULL)
     b1e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PRV_pFunCallBackCTCA>
     b22:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PRV_pFunCallBackCTCA+0x1>
     b26:	30 97       	sbiw	r30, 0x00	; 0
     b28:	09 f0       	breq	.+2      	; 0xb2c <__vector_7+0x4e>
		{
			PRV_pFunCallBackCTCA();
     b2a:	09 95       	icall
		}
	}
}
     b2c:	ff 91       	pop	r31
     b2e:	ef 91       	pop	r30
     b30:	bf 91       	pop	r27
     b32:	af 91       	pop	r26
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	7f 91       	pop	r23
     b3a:	6f 91       	pop	r22
     b3c:	5f 91       	pop	r21
     b3e:	4f 91       	pop	r20
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_5>:
	}
}


ISR(TIMER2_OVF)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	2f 93       	push	r18
     b5a:	3f 93       	push	r19
     b5c:	4f 93       	push	r20
     b5e:	5f 93       	push	r21
     b60:	6f 93       	push	r22
     b62:	7f 93       	push	r23
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	af 93       	push	r26
     b6a:	bf 93       	push	r27
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
	static u16 local_u16OVFCounter=0;
	local_u16OVFCounter++;
     b70:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <local_u16OVFCounter.1615>
     b74:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <local_u16OVFCounter.1615+0x1>
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <local_u16OVFCounter.1615+0x1>
     b7e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <local_u16OVFCounter.1615>
	
	if(TMR2_OVER_FLOW_COUNTER == local_u16OVFCounter)
     b82:	81 3d       	cpi	r24, 0xD1	; 209
     b84:	93 40       	sbci	r25, 0x03	; 3
     b86:	69 f4       	brne	.+26     	; 0xba2 <__vector_5+0x54>
	{
		// Init Timer With Preload Value
		TCNT2_REG = TMR2_PRELOAD_VALUE;
     b88:	81 e7       	ldi	r24, 0x71	; 113
     b8a:	84 bd       	out	0x24, r24	; 36
		
		// Clear Counter
		local_u16OVFCounter=0;
     b8c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <local_u16OVFCounter.1615+0x1>
     b90:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <local_u16OVFCounter.1615>
		
		// Call Action
		if(PRV_pFunCallBackOVF!=NULL)
     b94:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <PRV_pFunCallBackOVF>
     b98:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <PRV_pFunCallBackOVF+0x1>
     b9c:	30 97       	sbiw	r30, 0x00	; 0
     b9e:	09 f0       	breq	.+2      	; 0xba2 <__vector_5+0x54>
		{
			PRV_pFunCallBackOVF();
     ba0:	09 95       	icall
		}
	}
}
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_4>:


ISR(TIMER2_COMP)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
	static u16 local_u16CTCCounter=0;
	local_u16CTCCounter++;
     be6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <local_u16CTCCounter.1621>
     bea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <local_u16CTCCounter.1621+0x1>
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <local_u16CTCCounter.1621+0x1>
     bf4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <local_u16CTCCounter.1621>
	
	if(TMR2_CTC_COUNTER == local_u16CTCCounter)
     bf8:	88 3e       	cpi	r24, 0xE8	; 232
     bfa:	93 40       	sbci	r25, 0x03	; 3
     bfc:	59 f4       	brne	.+22     	; 0xc14 <__vector_4+0x50>
	{
		// Clear Counter
		local_u16CTCCounter=0;
     bfe:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <local_u16CTCCounter.1621+0x1>
     c02:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <local_u16CTCCounter.1621>
		
		// Call Action
		if(PRV_pFunCallBackCTC!=NULL)
     c06:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <PRV_pFunCallBackCTC>
     c0a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <PRV_pFunCallBackCTC+0x1>
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	09 f0       	breq	.+2      	; 0xc14 <__vector_4+0x50>
		{
			PRV_pFunCallBackCTC();
     c12:	09 95       	icall
		}
	}
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__subsf3>:
     c36:	50 58       	subi	r21, 0x80	; 128

00000c38 <__addsf3>:
     c38:	bb 27       	eor	r27, r27
     c3a:	aa 27       	eor	r26, r26
     c3c:	0e 94 33 06 	call	0xc66	; 0xc66 <__addsf3x>
     c40:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     c44:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscA>
     c48:	38 f0       	brcs	.+14     	; 0xc58 <__addsf3+0x20>
     c4a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_pscB>
     c4e:	20 f0       	brcs	.+8      	; 0xc58 <__addsf3+0x20>
     c50:	39 f4       	brne	.+14     	; 0xc60 <__addsf3+0x28>
     c52:	9f 3f       	cpi	r25, 0xFF	; 255
     c54:	19 f4       	brne	.+6      	; 0xc5c <__addsf3+0x24>
     c56:	26 f4       	brtc	.+8      	; 0xc60 <__addsf3+0x28>
     c58:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_nan>
     c5c:	0e f4       	brtc	.+2      	; 0xc60 <__addsf3+0x28>
     c5e:	e0 95       	com	r30
     c60:	e7 fb       	bst	r30, 7
     c62:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>

00000c66 <__addsf3x>:
     c66:	e9 2f       	mov	r30, r25
     c68:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_split3>
     c6c:	58 f3       	brcs	.-42     	; 0xc44 <__addsf3+0xc>
     c6e:	ba 17       	cp	r27, r26
     c70:	62 07       	cpc	r22, r18
     c72:	73 07       	cpc	r23, r19
     c74:	84 07       	cpc	r24, r20
     c76:	95 07       	cpc	r25, r21
     c78:	20 f0       	brcs	.+8      	; 0xc82 <__addsf3x+0x1c>
     c7a:	79 f4       	brne	.+30     	; 0xc9a <__addsf3x+0x34>
     c7c:	a6 f5       	brtc	.+104    	; 0xce6 <__addsf3x+0x80>
     c7e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_zero>
     c82:	0e f4       	brtc	.+2      	; 0xc86 <__addsf3x+0x20>
     c84:	e0 95       	com	r30
     c86:	0b 2e       	mov	r0, r27
     c88:	ba 2f       	mov	r27, r26
     c8a:	a0 2d       	mov	r26, r0
     c8c:	0b 01       	movw	r0, r22
     c8e:	b9 01       	movw	r22, r18
     c90:	90 01       	movw	r18, r0
     c92:	0c 01       	movw	r0, r24
     c94:	ca 01       	movw	r24, r20
     c96:	a0 01       	movw	r20, r0
     c98:	11 24       	eor	r1, r1
     c9a:	ff 27       	eor	r31, r31
     c9c:	59 1b       	sub	r21, r25
     c9e:	99 f0       	breq	.+38     	; 0xcc6 <__addsf3x+0x60>
     ca0:	59 3f       	cpi	r21, 0xF9	; 249
     ca2:	50 f4       	brcc	.+20     	; 0xcb8 <__addsf3x+0x52>
     ca4:	50 3e       	cpi	r21, 0xE0	; 224
     ca6:	68 f1       	brcs	.+90     	; 0xd02 <__addsf3x+0x9c>
     ca8:	1a 16       	cp	r1, r26
     caa:	f0 40       	sbci	r31, 0x00	; 0
     cac:	a2 2f       	mov	r26, r18
     cae:	23 2f       	mov	r18, r19
     cb0:	34 2f       	mov	r19, r20
     cb2:	44 27       	eor	r20, r20
     cb4:	58 5f       	subi	r21, 0xF8	; 248
     cb6:	f3 cf       	rjmp	.-26     	; 0xc9e <__addsf3x+0x38>
     cb8:	46 95       	lsr	r20
     cba:	37 95       	ror	r19
     cbc:	27 95       	ror	r18
     cbe:	a7 95       	ror	r26
     cc0:	f0 40       	sbci	r31, 0x00	; 0
     cc2:	53 95       	inc	r21
     cc4:	c9 f7       	brne	.-14     	; 0xcb8 <__addsf3x+0x52>
     cc6:	7e f4       	brtc	.+30     	; 0xce6 <__addsf3x+0x80>
     cc8:	1f 16       	cp	r1, r31
     cca:	ba 0b       	sbc	r27, r26
     ccc:	62 0b       	sbc	r22, r18
     cce:	73 0b       	sbc	r23, r19
     cd0:	84 0b       	sbc	r24, r20
     cd2:	ba f0       	brmi	.+46     	; 0xd02 <__addsf3x+0x9c>
     cd4:	91 50       	subi	r25, 0x01	; 1
     cd6:	a1 f0       	breq	.+40     	; 0xd00 <__addsf3x+0x9a>
     cd8:	ff 0f       	add	r31, r31
     cda:	bb 1f       	adc	r27, r27
     cdc:	66 1f       	adc	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	88 1f       	adc	r24, r24
     ce2:	c2 f7       	brpl	.-16     	; 0xcd4 <__addsf3x+0x6e>
     ce4:	0e c0       	rjmp	.+28     	; 0xd02 <__addsf3x+0x9c>
     ce6:	ba 0f       	add	r27, r26
     ce8:	62 1f       	adc	r22, r18
     cea:	73 1f       	adc	r23, r19
     cec:	84 1f       	adc	r24, r20
     cee:	48 f4       	brcc	.+18     	; 0xd02 <__addsf3x+0x9c>
     cf0:	87 95       	ror	r24
     cf2:	77 95       	ror	r23
     cf4:	67 95       	ror	r22
     cf6:	b7 95       	ror	r27
     cf8:	f7 95       	ror	r31
     cfa:	9e 3f       	cpi	r25, 0xFE	; 254
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <__addsf3x+0x9a>
     cfe:	b0 cf       	rjmp	.-160    	; 0xc60 <__addsf3+0x28>
     d00:	93 95       	inc	r25
     d02:	88 0f       	add	r24, r24
     d04:	08 f0       	brcs	.+2      	; 0xd08 <__addsf3x+0xa2>
     d06:	99 27       	eor	r25, r25
     d08:	ee 0f       	add	r30, r30
     d0a:	97 95       	ror	r25
     d0c:	87 95       	ror	r24
     d0e:	08 95       	ret

00000d10 <__cmpsf2>:
     d10:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_cmp>
     d14:	08 f4       	brcc	.+2      	; 0xd18 <__cmpsf2+0x8>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	08 95       	ret

00000d1a <__divsf3>:
     d1a:	0e 94 a1 06 	call	0xd42	; 0xd42 <__divsf3x>
     d1e:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     d22:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_pscB>
     d26:	58 f0       	brcs	.+22     	; 0xd3e <__divsf3+0x24>
     d28:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscA>
     d2c:	40 f0       	brcs	.+16     	; 0xd3e <__divsf3+0x24>
     d2e:	29 f4       	brne	.+10     	; 0xd3a <__divsf3+0x20>
     d30:	5f 3f       	cpi	r21, 0xFF	; 255
     d32:	29 f0       	breq	.+10     	; 0xd3e <__divsf3+0x24>
     d34:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
     d38:	51 11       	cpse	r21, r1
     d3a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
     d3e:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_nan>

00000d42 <__divsf3x>:
     d42:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_split3>
     d46:	68 f3       	brcs	.-38     	; 0xd22 <__divsf3+0x8>

00000d48 <__divsf3_pse>:
     d48:	99 23       	and	r25, r25
     d4a:	b1 f3       	breq	.-20     	; 0xd38 <__divsf3+0x1e>
     d4c:	55 23       	and	r21, r21
     d4e:	91 f3       	breq	.-28     	; 0xd34 <__divsf3+0x1a>
     d50:	95 1b       	sub	r25, r21
     d52:	55 0b       	sbc	r21, r21
     d54:	bb 27       	eor	r27, r27
     d56:	aa 27       	eor	r26, r26
     d58:	62 17       	cp	r22, r18
     d5a:	73 07       	cpc	r23, r19
     d5c:	84 07       	cpc	r24, r20
     d5e:	38 f0       	brcs	.+14     	; 0xd6e <__divsf3_pse+0x26>
     d60:	9f 5f       	subi	r25, 0xFF	; 255
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	44 1f       	adc	r20, r20
     d6a:	aa 1f       	adc	r26, r26
     d6c:	a9 f3       	breq	.-22     	; 0xd58 <__divsf3_pse+0x10>
     d6e:	35 d0       	rcall	.+106    	; 0xdda <__divsf3_pse+0x92>
     d70:	0e 2e       	mov	r0, r30
     d72:	3a f0       	brmi	.+14     	; 0xd82 <__divsf3_pse+0x3a>
     d74:	e0 e8       	ldi	r30, 0x80	; 128
     d76:	32 d0       	rcall	.+100    	; 0xddc <__divsf3_pse+0x94>
     d78:	91 50       	subi	r25, 0x01	; 1
     d7a:	50 40       	sbci	r21, 0x00	; 0
     d7c:	e6 95       	lsr	r30
     d7e:	00 1c       	adc	r0, r0
     d80:	ca f7       	brpl	.-14     	; 0xd74 <__divsf3_pse+0x2c>
     d82:	2b d0       	rcall	.+86     	; 0xdda <__divsf3_pse+0x92>
     d84:	fe 2f       	mov	r31, r30
     d86:	29 d0       	rcall	.+82     	; 0xdda <__divsf3_pse+0x92>
     d88:	66 0f       	add	r22, r22
     d8a:	77 1f       	adc	r23, r23
     d8c:	88 1f       	adc	r24, r24
     d8e:	bb 1f       	adc	r27, r27
     d90:	26 17       	cp	r18, r22
     d92:	37 07       	cpc	r19, r23
     d94:	48 07       	cpc	r20, r24
     d96:	ab 07       	cpc	r26, r27
     d98:	b0 e8       	ldi	r27, 0x80	; 128
     d9a:	09 f0       	breq	.+2      	; 0xd9e <__divsf3_pse+0x56>
     d9c:	bb 0b       	sbc	r27, r27
     d9e:	80 2d       	mov	r24, r0
     da0:	bf 01       	movw	r22, r30
     da2:	ff 27       	eor	r31, r31
     da4:	93 58       	subi	r25, 0x83	; 131
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	3a f0       	brmi	.+14     	; 0xdb8 <__divsf3_pse+0x70>
     daa:	9e 3f       	cpi	r25, 0xFE	; 254
     dac:	51 05       	cpc	r21, r1
     dae:	78 f0       	brcs	.+30     	; 0xdce <__divsf3_pse+0x86>
     db0:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
     db4:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
     db8:	5f 3f       	cpi	r21, 0xFF	; 255
     dba:	e4 f3       	brlt	.-8      	; 0xdb4 <__divsf3_pse+0x6c>
     dbc:	98 3e       	cpi	r25, 0xE8	; 232
     dbe:	d4 f3       	brlt	.-12     	; 0xdb4 <__divsf3_pse+0x6c>
     dc0:	86 95       	lsr	r24
     dc2:	77 95       	ror	r23
     dc4:	67 95       	ror	r22
     dc6:	b7 95       	ror	r27
     dc8:	f7 95       	ror	r31
     dca:	9f 5f       	subi	r25, 0xFF	; 255
     dcc:	c9 f7       	brne	.-14     	; 0xdc0 <__divsf3_pse+0x78>
     dce:	88 0f       	add	r24, r24
     dd0:	91 1d       	adc	r25, r1
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	97 f9       	bld	r25, 7
     dd8:	08 95       	ret
     dda:	e1 e0       	ldi	r30, 0x01	; 1
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	bb 1f       	adc	r27, r27
     de4:	62 17       	cp	r22, r18
     de6:	73 07       	cpc	r23, r19
     de8:	84 07       	cpc	r24, r20
     dea:	ba 07       	cpc	r27, r26
     dec:	20 f0       	brcs	.+8      	; 0xdf6 <__divsf3_pse+0xae>
     dee:	62 1b       	sub	r22, r18
     df0:	73 0b       	sbc	r23, r19
     df2:	84 0b       	sbc	r24, r20
     df4:	ba 0b       	sbc	r27, r26
     df6:	ee 1f       	adc	r30, r30
     df8:	88 f7       	brcc	.-30     	; 0xddc <__divsf3_pse+0x94>
     dfa:	e0 95       	com	r30
     dfc:	08 95       	ret

00000dfe <__fixunssfsi>:
     dfe:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_splitA>
     e02:	88 f0       	brcs	.+34     	; 0xe26 <__fixunssfsi+0x28>
     e04:	9f 57       	subi	r25, 0x7F	; 127
     e06:	98 f0       	brcs	.+38     	; 0xe2e <__fixunssfsi+0x30>
     e08:	b9 2f       	mov	r27, r25
     e0a:	99 27       	eor	r25, r25
     e0c:	b7 51       	subi	r27, 0x17	; 23
     e0e:	b0 f0       	brcs	.+44     	; 0xe3c <__fixunssfsi+0x3e>
     e10:	e1 f0       	breq	.+56     	; 0xe4a <__fixunssfsi+0x4c>
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	1a f0       	brmi	.+6      	; 0xe22 <__fixunssfsi+0x24>
     e1c:	ba 95       	dec	r27
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__fixunssfsi+0x14>
     e20:	14 c0       	rjmp	.+40     	; 0xe4a <__fixunssfsi+0x4c>
     e22:	b1 30       	cpi	r27, 0x01	; 1
     e24:	91 f0       	breq	.+36     	; 0xe4a <__fixunssfsi+0x4c>
     e26:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_zero>
     e2a:	b1 e0       	ldi	r27, 0x01	; 1
     e2c:	08 95       	ret
     e2e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_zero>
     e32:	67 2f       	mov	r22, r23
     e34:	78 2f       	mov	r23, r24
     e36:	88 27       	eor	r24, r24
     e38:	b8 5f       	subi	r27, 0xF8	; 248
     e3a:	39 f0       	breq	.+14     	; 0xe4a <__fixunssfsi+0x4c>
     e3c:	b9 3f       	cpi	r27, 0xF9	; 249
     e3e:	cc f3       	brlt	.-14     	; 0xe32 <__fixunssfsi+0x34>
     e40:	86 95       	lsr	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b3 95       	inc	r27
     e48:	d9 f7       	brne	.-10     	; 0xe40 <__fixunssfsi+0x42>
     e4a:	3e f4       	brtc	.+14     	; 0xe5a <__fixunssfsi+0x5c>
     e4c:	90 95       	com	r25
     e4e:	80 95       	com	r24
     e50:	70 95       	com	r23
     e52:	61 95       	neg	r22
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	8f 4f       	sbci	r24, 0xFF	; 255
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	08 95       	ret

00000e5c <__floatunsisf>:
     e5c:	e8 94       	clt
     e5e:	09 c0       	rjmp	.+18     	; 0xe72 <__floatsisf+0x12>

00000e60 <__floatsisf>:
     e60:	97 fb       	bst	r25, 7
     e62:	3e f4       	brtc	.+14     	; 0xe72 <__floatsisf+0x12>
     e64:	90 95       	com	r25
     e66:	80 95       	com	r24
     e68:	70 95       	com	r23
     e6a:	61 95       	neg	r22
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	99 23       	and	r25, r25
     e74:	a9 f0       	breq	.+42     	; 0xea0 <__floatsisf+0x40>
     e76:	f9 2f       	mov	r31, r25
     e78:	96 e9       	ldi	r25, 0x96	; 150
     e7a:	bb 27       	eor	r27, r27
     e7c:	93 95       	inc	r25
     e7e:	f6 95       	lsr	r31
     e80:	87 95       	ror	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b7 95       	ror	r27
     e88:	f1 11       	cpse	r31, r1
     e8a:	f8 cf       	rjmp	.-16     	; 0xe7c <__floatsisf+0x1c>
     e8c:	fa f4       	brpl	.+62     	; 0xecc <__floatsisf+0x6c>
     e8e:	bb 0f       	add	r27, r27
     e90:	11 f4       	brne	.+4      	; 0xe96 <__floatsisf+0x36>
     e92:	60 ff       	sbrs	r22, 0
     e94:	1b c0       	rjmp	.+54     	; 0xecc <__floatsisf+0x6c>
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	16 c0       	rjmp	.+44     	; 0xecc <__floatsisf+0x6c>
     ea0:	88 23       	and	r24, r24
     ea2:	11 f0       	breq	.+4      	; 0xea8 <__floatsisf+0x48>
     ea4:	96 e9       	ldi	r25, 0x96	; 150
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <__floatsisf+0x6a>
     ea8:	77 23       	and	r23, r23
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <__floatsisf+0x54>
     eac:	9e e8       	ldi	r25, 0x8E	; 142
     eae:	87 2f       	mov	r24, r23
     eb0:	76 2f       	mov	r23, r22
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <__floatsisf+0x5e>
     eb4:	66 23       	and	r22, r22
     eb6:	71 f0       	breq	.+28     	; 0xed4 <__floatsisf+0x74>
     eb8:	96 e8       	ldi	r25, 0x86	; 134
     eba:	86 2f       	mov	r24, r22
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	2a f0       	brmi	.+10     	; 0xecc <__floatsisf+0x6c>
     ec2:	9a 95       	dec	r25
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	88 1f       	adc	r24, r24
     eca:	da f7       	brpl	.-10     	; 0xec2 <__floatsisf+0x62>
     ecc:	88 0f       	add	r24, r24
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	97 f9       	bld	r25, 7
     ed4:	08 95       	ret

00000ed6 <__fp_cmp>:
     ed6:	99 0f       	add	r25, r25
     ed8:	00 08       	sbc	r0, r0
     eda:	55 0f       	add	r21, r21
     edc:	aa 0b       	sbc	r26, r26
     ede:	e0 e8       	ldi	r30, 0x80	; 128
     ee0:	fe ef       	ldi	r31, 0xFE	; 254
     ee2:	16 16       	cp	r1, r22
     ee4:	17 06       	cpc	r1, r23
     ee6:	e8 07       	cpc	r30, r24
     ee8:	f9 07       	cpc	r31, r25
     eea:	c0 f0       	brcs	.+48     	; 0xf1c <__fp_cmp+0x46>
     eec:	12 16       	cp	r1, r18
     eee:	13 06       	cpc	r1, r19
     ef0:	e4 07       	cpc	r30, r20
     ef2:	f5 07       	cpc	r31, r21
     ef4:	98 f0       	brcs	.+38     	; 0xf1c <__fp_cmp+0x46>
     ef6:	62 1b       	sub	r22, r18
     ef8:	73 0b       	sbc	r23, r19
     efa:	84 0b       	sbc	r24, r20
     efc:	95 0b       	sbc	r25, r21
     efe:	39 f4       	brne	.+14     	; 0xf0e <__fp_cmp+0x38>
     f00:	0a 26       	eor	r0, r26
     f02:	61 f0       	breq	.+24     	; 0xf1c <__fp_cmp+0x46>
     f04:	23 2b       	or	r18, r19
     f06:	24 2b       	or	r18, r20
     f08:	25 2b       	or	r18, r21
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__fp_cmp+0x3e>
     f0c:	08 95       	ret
     f0e:	0a 26       	eor	r0, r26
     f10:	09 f4       	brne	.+2      	; 0xf14 <__fp_cmp+0x3e>
     f12:	a1 40       	sbci	r26, 0x01	; 1
     f14:	a6 95       	lsr	r26
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	81 1d       	adc	r24, r1
     f1a:	81 1d       	adc	r24, r1
     f1c:	08 95       	ret

00000f1e <__fp_inf>:
     f1e:	97 f9       	bld	r25, 7
     f20:	9f 67       	ori	r25, 0x7F	; 127
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	08 95       	ret

00000f2a <__fp_nan>:
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	80 ec       	ldi	r24, 0xC0	; 192
     f2e:	08 95       	ret

00000f30 <__fp_pscA>:
     f30:	00 24       	eor	r0, r0
     f32:	0a 94       	dec	r0
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	18 06       	cpc	r1, r24
     f3a:	09 06       	cpc	r0, r25
     f3c:	08 95       	ret

00000f3e <__fp_pscB>:
     f3e:	00 24       	eor	r0, r0
     f40:	0a 94       	dec	r0
     f42:	12 16       	cp	r1, r18
     f44:	13 06       	cpc	r1, r19
     f46:	14 06       	cpc	r1, r20
     f48:	05 06       	cpc	r0, r21
     f4a:	08 95       	ret

00000f4c <__fp_round>:
     f4c:	09 2e       	mov	r0, r25
     f4e:	03 94       	inc	r0
     f50:	00 0c       	add	r0, r0
     f52:	11 f4       	brne	.+4      	; 0xf58 <__fp_round+0xc>
     f54:	88 23       	and	r24, r24
     f56:	52 f0       	brmi	.+20     	; 0xf6c <__fp_round+0x20>
     f58:	bb 0f       	add	r27, r27
     f5a:	40 f4       	brcc	.+16     	; 0xf6c <__fp_round+0x20>
     f5c:	bf 2b       	or	r27, r31
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__fp_round+0x18>
     f60:	60 ff       	sbrs	r22, 0
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__fp_round+0x20>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__fp_split3>:
     f6e:	57 fd       	sbrc	r21, 7
     f70:	90 58       	subi	r25, 0x80	; 128
     f72:	44 0f       	add	r20, r20
     f74:	55 1f       	adc	r21, r21
     f76:	59 f0       	breq	.+22     	; 0xf8e <__fp_splitA+0x10>
     f78:	5f 3f       	cpi	r21, 0xFF	; 255
     f7a:	71 f0       	breq	.+28     	; 0xf98 <__fp_splitA+0x1a>
     f7c:	47 95       	ror	r20

00000f7e <__fp_splitA>:
     f7e:	88 0f       	add	r24, r24
     f80:	97 fb       	bst	r25, 7
     f82:	99 1f       	adc	r25, r25
     f84:	61 f0       	breq	.+24     	; 0xf9e <__fp_splitA+0x20>
     f86:	9f 3f       	cpi	r25, 0xFF	; 255
     f88:	79 f0       	breq	.+30     	; 0xfa8 <__fp_splitA+0x2a>
     f8a:	87 95       	ror	r24
     f8c:	08 95       	ret
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	14 06       	cpc	r1, r20
     f94:	55 1f       	adc	r21, r21
     f96:	f2 cf       	rjmp	.-28     	; 0xf7c <__fp_split3+0xe>
     f98:	46 95       	lsr	r20
     f9a:	f1 df       	rcall	.-30     	; 0xf7e <__fp_splitA>
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <__fp_splitA+0x30>
     f9e:	16 16       	cp	r1, r22
     fa0:	17 06       	cpc	r1, r23
     fa2:	18 06       	cpc	r1, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	f1 cf       	rjmp	.-30     	; 0xf8a <__fp_splitA+0xc>
     fa8:	86 95       	lsr	r24
     faa:	71 05       	cpc	r23, r1
     fac:	61 05       	cpc	r22, r1
     fae:	08 94       	sec
     fb0:	08 95       	ret

00000fb2 <__fp_zero>:
     fb2:	e8 94       	clt

00000fb4 <__fp_szero>:
     fb4:	bb 27       	eor	r27, r27
     fb6:	66 27       	eor	r22, r22
     fb8:	77 27       	eor	r23, r23
     fba:	cb 01       	movw	r24, r22
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret

00000fc0 <__mulsf3>:
     fc0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__mulsf3x>
     fc4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     fc8:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscA>
     fcc:	38 f0       	brcs	.+14     	; 0xfdc <__mulsf3+0x1c>
     fce:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_pscB>
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <__mulsf3+0x1c>
     fd4:	95 23       	and	r25, r21
     fd6:	11 f0       	breq	.+4      	; 0xfdc <__mulsf3+0x1c>
     fd8:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
     fdc:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_nan>
     fe0:	11 24       	eor	r1, r1
     fe2:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>

00000fe6 <__mulsf3x>:
     fe6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_split3>
     fea:	70 f3       	brcs	.-36     	; 0xfc8 <__mulsf3+0x8>

00000fec <__mulsf3_pse>:
     fec:	95 9f       	mul	r25, r21
     fee:	c1 f3       	breq	.-16     	; 0xfe0 <__mulsf3+0x20>
     ff0:	95 0f       	add	r25, r21
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	55 1f       	adc	r21, r21
     ff6:	62 9f       	mul	r22, r18
     ff8:	f0 01       	movw	r30, r0
     ffa:	72 9f       	mul	r23, r18
     ffc:	bb 27       	eor	r27, r27
     ffe:	f0 0d       	add	r31, r0
    1000:	b1 1d       	adc	r27, r1
    1002:	63 9f       	mul	r22, r19
    1004:	aa 27       	eor	r26, r26
    1006:	f0 0d       	add	r31, r0
    1008:	b1 1d       	adc	r27, r1
    100a:	aa 1f       	adc	r26, r26
    100c:	64 9f       	mul	r22, r20
    100e:	66 27       	eor	r22, r22
    1010:	b0 0d       	add	r27, r0
    1012:	a1 1d       	adc	r26, r1
    1014:	66 1f       	adc	r22, r22
    1016:	82 9f       	mul	r24, r18
    1018:	22 27       	eor	r18, r18
    101a:	b0 0d       	add	r27, r0
    101c:	a1 1d       	adc	r26, r1
    101e:	62 1f       	adc	r22, r18
    1020:	73 9f       	mul	r23, r19
    1022:	b0 0d       	add	r27, r0
    1024:	a1 1d       	adc	r26, r1
    1026:	62 1f       	adc	r22, r18
    1028:	83 9f       	mul	r24, r19
    102a:	a0 0d       	add	r26, r0
    102c:	61 1d       	adc	r22, r1
    102e:	22 1f       	adc	r18, r18
    1030:	74 9f       	mul	r23, r20
    1032:	33 27       	eor	r19, r19
    1034:	a0 0d       	add	r26, r0
    1036:	61 1d       	adc	r22, r1
    1038:	23 1f       	adc	r18, r19
    103a:	84 9f       	mul	r24, r20
    103c:	60 0d       	add	r22, r0
    103e:	21 1d       	adc	r18, r1
    1040:	82 2f       	mov	r24, r18
    1042:	76 2f       	mov	r23, r22
    1044:	6a 2f       	mov	r22, r26
    1046:	11 24       	eor	r1, r1
    1048:	9f 57       	subi	r25, 0x7F	; 127
    104a:	50 40       	sbci	r21, 0x00	; 0
    104c:	9a f0       	brmi	.+38     	; 0x1074 <__mulsf3_pse+0x88>
    104e:	f1 f0       	breq	.+60     	; 0x108c <__mulsf3_pse+0xa0>
    1050:	88 23       	and	r24, r24
    1052:	4a f0       	brmi	.+18     	; 0x1066 <__mulsf3_pse+0x7a>
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	bb 1f       	adc	r27, r27
    105a:	66 1f       	adc	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	50 40       	sbci	r21, 0x00	; 0
    1064:	a9 f7       	brne	.-22     	; 0x1050 <__mulsf3_pse+0x64>
    1066:	9e 3f       	cpi	r25, 0xFE	; 254
    1068:	51 05       	cpc	r21, r1
    106a:	80 f0       	brcs	.+32     	; 0x108c <__mulsf3_pse+0xa0>
    106c:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
    1070:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
    1074:	5f 3f       	cpi	r21, 0xFF	; 255
    1076:	e4 f3       	brlt	.-8      	; 0x1070 <__mulsf3_pse+0x84>
    1078:	98 3e       	cpi	r25, 0xE8	; 232
    107a:	d4 f3       	brlt	.-12     	; 0x1070 <__mulsf3_pse+0x84>
    107c:	86 95       	lsr	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	b7 95       	ror	r27
    1084:	f7 95       	ror	r31
    1086:	e7 95       	ror	r30
    1088:	9f 5f       	subi	r25, 0xFF	; 255
    108a:	c1 f7       	brne	.-16     	; 0x107c <__mulsf3_pse+0x90>
    108c:	fe 2b       	or	r31, r30
    108e:	88 0f       	add	r24, r24
    1090:	91 1d       	adc	r25, r1
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__udivmodsi4>:
    109a:	a1 e2       	ldi	r26, 0x21	; 33
    109c:	1a 2e       	mov	r1, r26
    109e:	aa 1b       	sub	r26, r26
    10a0:	bb 1b       	sub	r27, r27
    10a2:	fd 01       	movw	r30, r26
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <__udivmodsi4_ep>

000010a6 <__udivmodsi4_loop>:
    10a6:	aa 1f       	adc	r26, r26
    10a8:	bb 1f       	adc	r27, r27
    10aa:	ee 1f       	adc	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	a2 17       	cp	r26, r18
    10b0:	b3 07       	cpc	r27, r19
    10b2:	e4 07       	cpc	r30, r20
    10b4:	f5 07       	cpc	r31, r21
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__udivmodsi4_ep>
    10b8:	a2 1b       	sub	r26, r18
    10ba:	b3 0b       	sbc	r27, r19
    10bc:	e4 0b       	sbc	r30, r20
    10be:	f5 0b       	sbc	r31, r21

000010c0 <__udivmodsi4_ep>:
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	1a 94       	dec	r1
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <__udivmodsi4_loop>
    10cc:	60 95       	com	r22
    10ce:	70 95       	com	r23
    10d0:	80 95       	com	r24
    10d2:	90 95       	com	r25
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	bd 01       	movw	r22, r26
    10da:	cf 01       	movw	r24, r30
    10dc:	08 95       	ret

000010de <__umulhisi3>:
    10de:	a2 9f       	mul	r26, r18
    10e0:	b0 01       	movw	r22, r0
    10e2:	b3 9f       	mul	r27, r19
    10e4:	c0 01       	movw	r24, r0
    10e6:	a3 9f       	mul	r26, r19
    10e8:	70 0d       	add	r23, r0
    10ea:	81 1d       	adc	r24, r1
    10ec:	11 24       	eor	r1, r1
    10ee:	91 1d       	adc	r25, r1
    10f0:	b2 9f       	mul	r27, r18
    10f2:	70 0d       	add	r23, r0
    10f4:	81 1d       	adc	r24, r1
    10f6:	11 24       	eor	r1, r1
    10f8:	91 1d       	adc	r25, r1
    10fa:	08 95       	ret

000010fc <_exit>:
    10fc:	f8 94       	cli

000010fe <__stop_program>:
    10fe:	ff cf       	rjmp	.-2      	; 0x10fe <__stop_program>
